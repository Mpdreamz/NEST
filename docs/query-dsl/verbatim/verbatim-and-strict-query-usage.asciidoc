:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/2.4

:xpack_current: https://www.elastic.co/guide/en/x-pack/2.4

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/2.x/src/Tests/QueryDsl/Verbatim/VerbatimAndStrictQueryUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[verbatim-and-strict-query-usage]]
=== Verbatim and Strict Query Usage

NEST has the concept of conditionless queries; if the input to a query is determined to be __empty__, for example,`null` or `""` for a string input, then the query will not be serialized and sent to Elasticsearch. If a conditionless
query is part of a compound query then the query will not be part of the json query dsl sent to Elasticsearch.

Conditionless behavior can be controlled on individual queries by using Strict and Verbatim queries

Strict::

Individual queries can be marked as strict meaning that if they are conditionless, an exception is thrown.
This is useful for when a query must have an input value.

Verbatim::

Individual queries can be marked as verbatim meaning that the query should be sent to Elasticsearch **as is**,
even if it is conditionless.

[float]
=== Verbatim query usage

`IsVerbatim` should be set on individual queries to take effect

==== Fluent DSL example

[source,csharp]
----
q
.Bool(b => b
    .Must(qt => qt
        .Term(t => t
            .Verbatim()
            .Field(p => p.Description)
            .Value("")
        ), qt => qt
        .Term(t => t
            .Field(p => p.Name)
            .Value("foo")
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
&& new TermQuery
{
    Field = "name",
    Value = "foo"
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "description": {
            "value": ""
          }
        }
      },
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

[float]
== Non-Cascading Strict Outer Queries

Setting `IsStrict` on the outer query container does not cascade

==== Fluent DSL example

[source,csharp]
----
q
.Strict()
.Bool(b => b
    .Must(qt => qt
        .Term(t => t
            .Field(p => p.Description)
            .Value("")
        ), qt => qt
        .Term(t => t
            .Field(p => p.Name)
            .Value("foo")
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
IQueryContainer query = new QueryContainer(new BoolQuery
{
    Must = new List<QueryContainer>
    {
        new TermQuery
        {
            Field = "description",
            Value = ""
        },
        new TermQuery
        {
            Field = "name",
            Value = "foo"
        }
    }
});

query.IsStrict = true;
return (QueryContainer)query;
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

[float]
== Non-Cascading Verbatim Outer Queries

Setting `IsVerbatim` on the outer query container does not cascade

==== Fluent DSL example

[source,csharp]
----
q
.Verbatim()
.Bool(b => b
    .Must(qt => qt
        .Term(t => t
            .Field(p => p.Description)
            .Value("")
        ), qt => qt
        .Term(t => t
            .Field(p => p.Name)
            .Value("foo")
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
IQueryContainer query = new QueryContainer(new BoolQuery
{
    Must = new List<QueryContainer>
    {
        new TermQuery
        {
            Field = "description",
            Value = ""
        },
        new TermQuery
        {
            Field = "name",
            Value = "foo"
        }
    }
});

query.IsVerbatim = true;
return (QueryContainer)query;
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

A compound query can also be marked as verbatim, demonstrated here with a `bool` query. 

==== Fluent DSL example

[source,csharp]
----
q
.Bool(b => b
    .Verbatim()
)
----

==== Object Initializer syntax example

[source,csharp]
----
new BoolQuery
{
    IsVerbatim = true,
}
----

[source,javascript]
.Example json output
----
{
  "bool": {}
}
----

A single verbatim query will be serialized as-is 

==== Fluent DSL example

[source,csharp]
----
q
.Term(t => t
    .Verbatim()
    .Field(p => p.Description)
    .Value("")
)
----

==== Object Initializer syntax example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
----

[source,javascript]
.Example json output
----
{
  "term": {
    "description": {
      "value": ""
    }
  }
}
----

Leaf queries within a compound query marked as verbatim will also be serialized as-is

==== Fluent DSL example

[source,csharp]
----
q
.Bool(b => b
    .Filter(f => !f
        .Term(t => t
            .Verbatim()
            .Field(p => p.Name)
            .Value("")
        ) && f
        .Exists(e => e
            .Field(p => p.NumberOfCommits)
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new BoolQuery
{
    Filter = new QueryContainer[] {
        !new TermQuery
        {
            IsVerbatim = true,
            Field = "name",
            Value = ""
        } &&
        new ExistsQuery
        {
            Field = "numberOfCommits"
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "filter": [
      {
        "bool": {
          "must": [
            {
              "exists": {
                "field": "numberOfCommits"
              }
            }
          ],
          "must_not": [
            {
              "term": {
                "name": {
                  "value": ""
                }
              }
            }
          ]
        }
      }
    ]
  }
}
----

[float]
=== Strict Query Usage

A query can be marked as strict meaning that _if_ it is determined to be _conditionless_, it will throw an
exception. The following example demonstrates this by trying to send an empty string as the value for
a `term` query marked as strict

