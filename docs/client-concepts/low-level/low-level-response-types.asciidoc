:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/7.5

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/7.x/src/Tests/Tests/ClientConcepts/LowLevel/LowLevelResponseTypes.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[low-level-response-types]]
=== Low Level Client Response Types

[source,csharp]
----
return @"{
""boolean"" : true,    
""string"" : ""v"",
""number"" : 29,
""array"" : [1, 2, 3, 4],
""object"" : {
    ""first"" : ""value1"",
    ""second"" : ""value2"",
    ""nested"" : { ""x"" : ""value3"" }
},
""array_of_objects"" : [
    {
        ""first"" : ""value11"",
        ""second"" : ""value12"",
        ""nested"" : { ""x"" : ""value4"" }
    },
    {
        ""first"" : ""value21"",
        ""second"" : ""value22"",
        ""nested"" : { ""x"" : ""value5"" },
        ""complex.nested"" : { ""x"" : ""value6"" }
    }
]
        }";
----

[float]
=== DynamicResponse

[source,csharp]
----
var response = Client.LowLevel.Search<DynamicResponse>(PostData.Empty);

response.Get<string>("object.first").Should()
    .NotBeEmpty()
    .And.Be("value1");

response.Get<string>("object._arbitrary_key_").Should()
    .NotBeEmpty()
    .And.Be("first");

response.Get<int>("array.1").Should().Be(2);
response.Get<long>("array.1").Should().Be(2);
response.Get<long>("number").Should().Be(29);
response.Get<long?>("number").Should().Be(29);
response.Get<long?>("number_does_not_exist").Should().Be(null);
response.Get<long?>("number").Should().Be(29);

response.Get<string>("array_of_objects.1.second").Should()
    .NotBeEmpty()
    .And.Be("value22");

response.Get<string>("array_of_objects.1.complex\\.nested.x").Should()
    .NotBeEmpty()
    .And.Be("value6");
----

