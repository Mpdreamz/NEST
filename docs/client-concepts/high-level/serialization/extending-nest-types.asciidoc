:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/6.1

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/ClientConcepts/HighLevel/Serialization/ExtendingNestTypes.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[extending-nest-types]]
=== Extending NEST types

Although of course NEST should always be up to date with a 100% API coverage of the Elasticsearch API, sometimes you might want to work around a bug
or maybe use types from a 3rd party plugin that NEST does not support.

[source,csharp]
----
public class MyPluginProperty : IProperty
{
    IDictionary<string, object> IProperty.LocalMetadata { get; set; }
    public string Type { get; set; } = "my_plugin_property";
    public PropertyName Name { get; set; }

    public MyPluginProperty(string name, string language)
    {
        this.Name = name;
        this.Language = language;
        this.Numeric = true;
    }

    [PropertyName("language")]
    public string Language { get; set; }

    [PropertyName("numeric")]
    public bool Numeric { get; set; }
}
----

`PropertyNameAttribute` can be used to mark properties that should be serialized. Without this attribute NEST won't pick up the property for serialization.

Now that we have our own `IProperty` implementation we can add it to our propertes mapping when creating an index

[source,csharp]
----
var descriptor = new CreateIndexDescriptor("myindex")
    .Mappings(ms => ms
        .Map<Project>(m => m
            .Properties(props => props
                .Custom(new MyPluginProperty("fieldName", "dutch"))
            )
        )
    );

var expected = new
{
    mappings = new
    {
        doc = new
        {
            properties = new
            {
                fieldName = new
                {
                    type = "my_plugin_property",
                    language = "dutch",
                    numeric = true
                }
            }
        }
    }
};

Expect(expected)
    .NoRoundTrip() <1>
    .WhenSerializing((ICreateIndexRequest) descriptor);
----
<1> while we can serialize our `my_plugin_property` NEST does not know how to read it, for NEST 7.x we plan to make this more plugable.

