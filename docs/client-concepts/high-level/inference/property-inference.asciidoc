:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/2.4

:xpack_current: https://www.elastic.co/guide/en/x-pack/2.4

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/2.x/src/Tests/ClientConcepts/HighLevel/Inference/PropertyInference.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[property-inference]]
=== Property name inference

==== Appending suffixes to a lambda expression body

Suffixes can be appended to the body of a lambda expression, which is useful in cases where
you have a POCO property mapped as a <<multi-fields, multi-field>>
and want to use strongly typed access with a lambda expression, yet append a suffix to the
generated field name, in order to access a particular sub field of the multi-field.

The `.Suffix()` extension method can be used for this purpose and when serializing expressions suffixed
in this way, the serialized property name resolves to the last token

[source,csharp]
----
Expression<Func<Project, object>> expression = p => p.Name.Suffix("raw");
Expect("raw").WhenSerializing<PropertyName>(expression);
----

==== Appending suffixes to a Lambda expression

Alternatively, suffixes can be applied to a lambda expression directly using
the `.ApplySuffix()` extension method. Again, the serialized field name
resolves to the last token

[source,csharp]
----
Expression<Func<Project, object>> expression = p => p.Name;
expression = expression.AppendSuffix("raw");
Expect("raw").WhenSerializing<PropertyName>(expression);
----

=== Naming conventions

Currently, the name of a field cannot contain a `.` in Elasticsearch due to the potential for ambiguity with
a field that is mapped as a multi field.

In these cases, NEST allows the call to go to Elasticsearch, deferring the naming conventions to the server side and,
in the case of a `.` in a field name, a `400 Bad Response` is returned with a server error indicating the reason

[source,csharp]
----
var createIndexResponse = _client.CreateIndex("random-" + Guid.NewGuid().ToString().ToLowerInvariant(), c => c
    .Mappings(m => m
        .Map("type-with-dot", mm => mm
            .Properties(p => p
                .String(s => s
                    .Name("name-with.dot")
                )
            )
        )
    )
);
----

The response is not valid 

[source,csharp]
----
createIndexResponse.ShouldNotBeValid();
----

`DebugInformation` provides an audit trail of information to help diagnose the issue 

[source,csharp]
----
createIndexResponse.DebugInformation.Should().NotBeNullOrEmpty();
----

`ServerError` contains information about the response from Elasticsearch 

[source,csharp]
----
createIndexResponse.ServerError.Should().NotBeNull();
createIndexResponse.ServerError.Status.Should().Be(400);
createIndexResponse.ServerError.Error.Should().NotBeNull();
createIndexResponse.ServerError.Error.RootCause.Should().NotBeNullOrEmpty();

var rootCause = createIndexResponse.ServerError.Error.RootCause[0];
----

We can see that the underlying reason is a `.` in the field name "name-with.dot" 

[source,csharp]
----
rootCause.Reason.Should().Be("Field name [name-with.dot] cannot contain '.'");
rootCause.Type.Should().Be("mapper_parsing_exception");
----

