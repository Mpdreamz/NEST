:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/6.1

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/ClientConcepts/HighLevel/Inference/TypesAndRelationsInference.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[types-and-relations-inference]]
=== Types and relations inference

==== TypeName default

Type names are resolved by lowercasing the type name

[source,csharp]
----
var settings = new ConnectionSettings();
var resolver = new TypeNameResolver(settings);
var index = resolver.Resolve<Project>();
index.Should().Be("project");
----

[[type-name-inferrer]]
==== Override tye name inferer

You can provide a delegate to override the default type name inferrer for types

[source,csharp]
----
var settings = new ConnectionSettings()
    .DefaultTypeNameInferrer(t=>t.Name.ToLower() + "-suffix");
var resolver = new TypeNameResolver(settings);
var type = resolver.Resolve<Project>();
type.Should().Be("project-suffix");
----

[[pluralize-type-names]]
==== Pluralize type names

The default behaviour in older versions of NEST was to pluralize typenames

You can still opt in to this old behaviour as followed:

[source,csharp]
----
var settings = new ConnectionSettings()
    .PluralizeTypeNames();
var resolver = new TypeNameResolver(settings);
var index = resolver.Resolve<Project>();
index.Should().Be("projects");
----

[[relation-names]]
==== Relation names

Prior to Elasticsearch 6.x you could have multiple types per index. They acted as a discrimatory column but were often
confused with tables. The fact that the mapping API's treated them as seperate entities did not help.

The general guideline has always been to use a single type per index. Starting from 6.x this is also enforced.
Some features still need to store multiple types in a single index such as Parent/Child join relations.

Both `Parent` and `Child` will need to have resolve to the same typename to be indexed into the same index.

Therefore in 6.x we need a different type that translates a CLR type to a join relation. This can be configured seperately
using `.RelationName()`

[source,csharp]
----
var settings = new ConnectionSettings()
    .InferMappingFor<CommitActivity>(m => m
        .IndexName("projects-and-commits")
        .TypeName("doc")
        .RelationName("commits")
    )
    .InferMappingFor<Project>(m => m
        .IndexName("projects-and-commits")
        .TypeName("doc")
        .RelationName("projects")
    );

var resolver = new RelationNameResolver(settings);
var relation = resolver.Resolve<Project>();
relation.Should().Be("projects");

relation = resolver.Resolve<CommitActivity>();
relation.Should().Be("commits");

var settings = new ConnectionSettings()
    .InferMappingFor<Project>(m => m
        .IndexName("projects-and-commits")
        .TypeName("doc")
    );

var resolver = new RelationNameResolver(settings);
var relation = resolver.Resolve<Project>();
relation.Should().Be("project");
----

