:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/CommonOptions/TimeUnit/TimeUnits.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[time-units]]
== Time units

Whenever durations need to be specified, eg for a timeout parameter, the duration can be specified
as a whole number representing time in milliseconds, or as a time value like `2d` for 2 days.

=== Using Time units in NEST

NEST uses `Time` to strongly type this and there are several ways to construct one.

==== Constructor

The most straight forward way to construct a `Time` is through its constructor

[source,csharp]
----
var unitString = new Time("2d");
var unitComposed = new Time(2, Nest.TimeUnit.Day);
var unitTimeSpan = new Time(TimeSpan.FromDays(2));
var unitMilliseconds = new Time(1000 * 60 * 60 * 24 * 2);
----

When serializing Time constructed from

* a string

* milliseconds (as a double)

* composition of factor and interval

* a `TimeSpan`

the expression will be serialized to a time unit string composed of the factor and interval e.g. `2d`

[source,csharp]
----
Expect("2d")
    .WhenSerializing(unitString)
    .WhenSerializing(unitComposed)
    .WhenSerializing(unitTimeSpan)
    .WhenSerializing(unitMilliseconds);
----

The `Milliseconds` property on `Time` is calculated even when not using the constructor that takes a double

[source,csharp]
----
unitMilliseconds.Milliseconds.Should().Be(1000*60*60*24*2);

unitComposed.Milliseconds.Should().Be(1000*60*60*24*2);
unitTimeSpan.Milliseconds.Should().Be(1000*60*60*24*2);
unitString.Milliseconds.Should().Be(1000*60*60*24*2);
----

==== Implicit conversion

Alternatively to using the constructor, `string`, `TimeSpan` and `double` can be implicitly converted to `Time`

[source,csharp]
----
Time oneAndHalfYear = "1.5y";

Time twoWeeks = TimeSpan.FromDays(14);

Time twoDays = 1000*60*60*24*2;

Expect("1.5y").WhenSerializing(oneAndHalfYear);

Expect("2w").WhenSerializing(twoWeeks);

Expect("2d").WhenSerializing(twoDays);
----

[source,csharp]
----
Time oneAndHalfYear = "1.5y";

Time twoWeeks = TimeSpan.FromDays(14);

Time twoDays = 1000*60*60*24*2;
----

Milliseconds are calculated even when values are not passed as long...

[source,csharp]
----
twoWeeks.Milliseconds.Should().BeGreaterThan(1);
----

...**except** when dealing with years or months, whose millsecond value cannot
be calculated *accurately*, since they are not fixed durations. For instance,
30 vs 31 vs 28 days in a month, or 366 vs 365 days in a year.
In this instance, Milliseconds will be -1.

[source,csharp]
----
oneAndHalfYear.Milliseconds.Should().Be(-1);
----

This allows you to do comparisons on the expressions

[source,csharp]
----
oneAndHalfYear.Should().BeGreaterThan(twoWeeks);

(oneAndHalfYear > twoWeeks).Should().BeTrue();

(oneAndHalfYear >= twoWeeks).Should().BeTrue();

(twoDays != null).Should().BeTrue();

(twoDays >= new Time("2d")).Should().BeTrue();

twoDays.Should().BeLessThan(twoWeeks);

(twoDays < twoWeeks).Should().BeTrue();

(twoDays <= twoWeeks).Should().BeTrue();

(twoDays <= new Time("2d")).Should().BeTrue();
----

Special Time values `0` and `-1` can be compared against eachother
and other Time values although admittingly this is a tad nonsensical.

[source,csharp]
----
Time.MinusOne.Should().BeLessThan(Time.Zero);

Time.Zero.Should().BeGreaterThan(Time.MinusOne);

Time.Zero.Should().BeLessThan(twoDays);

Time.MinusOne.Should().BeLessThan(twoDays);
----

And assert equality

[source,csharp]
----
twoDays.Should().Be(new Time("2d"));

(twoDays == new Time("2d")).Should().BeTrue();

(twoDays != new Time("2.1d")).Should().BeTrue();

(new Time("2.1d") == new Time(TimeSpan.FromDays(2.1))).Should().BeTrue();

(new Time("-1") == new Time(-1)).Should().BeFalse();

(new Time("-1") == Time.MinusOne).Should().BeTrue();
----

[source,csharp]
----
private class StringParsingTestCases : List<Tuple<string, TimeSpan, string>>
{
    public void Add(string original, TimeSpan expect, string toString) =>
        this.Add(Tuple.Create(original, expect, toString));

    public void Add(string bad, string argumentExceptionContains) =>
        this.Add(Tuple.Create(bad, TimeSpan.FromDays(1), argumentExceptionContains));
}
----

[source,csharp]
----
var testCases = new StringParsingTestCases
{
    { "1000 nanos", new TimeSpan(10) , "1000nanos"},
    { "1000nanos", new TimeSpan(10), "1000nanos"},
    { "1000 NANOS", new TimeSpan(10), "1000nanos" },
    { "1000NANOS", new TimeSpan(10), "1000nanos" },
    { "10micros", new TimeSpan(100), "10micros" },
    { "10   MS", new TimeSpan(0, 0, 0, 0, 10), "10ms" },
    { "10ms", new TimeSpan(0, 0, 0, 0, 10), "10ms" },
    { "10   ms", new TimeSpan(0, 0, 0, 0, 10), "10ms" },
    { "10s", new TimeSpan(0, 0, 10), "10s" },
    { "-10s", new TimeSpan(0, 0, -10), "-10s" },
    { "-10S", new TimeSpan(0, 0, -10), "-10s" },
    { "10m", new TimeSpan(0, 10, 0) , "10m"},
    { "10M", new TimeSpan(300, 0, 0, 0), "10M" }, // 300 days not minutes
    { "10h", new TimeSpan(10, 0, 0), "10h" },
    { "10H", new TimeSpan(10, 0, 0) , "10h"},
    { "10d", new TimeSpan(10, 0, 0, 0) , "10d"},
};
----

[source,csharp]
----
foreach (var testCase in testCases)
{
    var time = new Time(testCase.Item1);
    time.ToTimeSpan().Should().Be(testCase.Item2, "we passed in {0}", testCase.Item1);
    time.ToString().Should().Be(testCase.Item3);
}
----

[source,csharp]
----
var testCases = new StringParsingTestCases
{
    { "1000", "missing an interval"},
    { "1000x", "string is invalid"},
};
----

[source,csharp]
----
foreach (var testCase in testCases)
{
    Action create = () => new Time(testCase.Item1);
    var e = create.Invoking((a) => a()).ShouldThrow<ArgumentException>(testCase.Item1).Subject.First();
    e.Message.Should().Contain(testCase.Item3);
}
----

=== Units of Time

Units of `Time` are specified as a union of either a `DateInterval` or `Time`,
both of which implicitly convert to the `Union` of these two.

[source,csharp]
----
Expect("month").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Month);

Expect("day").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Day);

Expect("hour").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Hour);

Expect("minute").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Minute);

Expect("quarter").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Quarter);

Expect("second").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Second);

Expect("week").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Week);

Expect("year").WhenSerializing<Union<DateInterval, Time>>(DateInterval.Year);

Expect("2d").WhenSerializing<Union<DateInterval, Time>>((Time)"2d");

Expect("1.16w").WhenSerializing<Union<DateInterval, Time>>((Time)TimeSpan.FromDays(8.1));
----

