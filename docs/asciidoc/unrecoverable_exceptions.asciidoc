:ref_current: http://www.elastic.co/guide/elasticsearch/reference/current

== Unrecoverable exceptions 
Unrecoverable exceptions are excepted exceptions that are grounds to exit the client pipeline immediately. 
By default the client won't throw on any ElasticsearchClientException but return an invalid response. 
You can configure the client to throw using ThrowExceptions() on ConnectionSettings. The following test
both a client that throws and one that returns an invalid response with an `.OriginalException` exposed 


[source, csharp]
----
var recoverablExceptions = new[]
			{
				new PipelineException(PipelineFailure.BadResponse),
				new PipelineException(PipelineFailure.PingFailure),
			};
recoverablExceptions.Should().OnlyContain(e => e.Recoverable);
var unrecoverableExceptions = new[]
			{
				new PipelineException(PipelineFailure.CouldNotStartSniffOnStartup),
				new PipelineException(PipelineFailure.SniffFailure),
				new PipelineException(PipelineFailure.Unexpected),
				new PipelineException(PipelineFailure.BadAuthentication),
				new PipelineException(PipelineFailure.MaxRetriesReached),
				new PipelineException(PipelineFailure.MaxTimeoutReached)
			};
unrecoverableExceptions.Should().OnlyContain(e => !e.Recoverable);
var audit = new Auditor(() => Framework.Cluster
				.Nodes(10)
				.Ping(r => r.SucceedAlways())
				.ClientCalls(r => r.FailAlways(401))
				.StaticConnectionPool()
				.AllDefaults()
			);
audit = await audit.TraceElasticsearchException(
				new ClientCall {
					{ AuditEvent.PingSuccess, 9200 },
					{ AuditEvent.BadResponse, 9200 },
				},
				(e) =>
				{
					e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
				}
			);
e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
----
