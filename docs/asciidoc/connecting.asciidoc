:ref_current: http://www.elastic.co/guide/elasticsearch/reference/current

# Connecting 
Connecting to *Elasticsearch* with `Elasticsearch.Net` is quite easy but has a few toggles and options worth knowing.

# Choosing the right connection strategy
If you simply new an `ElasticLowLevelClient`, it will be a non-failover connection to `http://localhost:9200`


[source, csharp]
----
var client = new ElasticLowLevelClient();
var tokenizers = new TokenizersDescriptor();
----

If your Elasticsearch node does not live at `http://localhost:9200` but i.e `http://mynode.example.com:8082/apiKey`, then 
you will need to pass in some instance of `IConnectionConfigurationValues`.

The easiest way to do this is:


[source, csharp]
----
var node = new Uri("http://mynode.example.com:8082/apiKey");
var config = new ConnectionConfiguration(node);
var client = new ElasticLowLevelClient(config);
----

This however is still a non-failover connection. Meaning if that `node` goes down the operation will not be retried on any other nodes in the cluster.

To get a failover connection we have to pass an `IConnectionPool` instance instead of a `Uri`.


[source, csharp]
----
var node = new Uri("http://mynode.example.com:8082/apiKey");
var connectionPool = new SniffingConnectionPool(new[] { node });
var config = new ConnectionConfiguration(connectionPool);
var client = new ElasticLowLevelClient(config);
----

Here instead of directly passing `node`, we pass a `SniffingConnectionPool` which will use our `node` to find out the rest of the available cluster nodes.
Be sure to read more about [Connection Pooling and Cluster Failover here](/elasticsearch-net/cluster-failover.html)

## Options

Besides either passing a `Uri` or `IConnectionPool` to `ConnectionConfiguration`, you can also fluently control many more options. For instance:


[source, csharp]
----
var node = new Uri("http://mynode.example.com:8082/apiKey");
var connectionPool = new SniffingConnectionPool(new[] { node });
var config = new ConnectionConfiguration(connectionPool)
				.DisableDirectStreaming()
				.BasicAuthentication("user", "pass")
				.RequestTimeout(TimeSpan.FromSeconds(5));
----

The following is a list of available connection configuration options:


[source, csharp]
----
var client = new ElasticLowLevelClient();
----
Disable automatic proxy detection.  Defaults to true. 


Enable compressed request and reesponses from Elasticsearch (Note that nodes need to be configured 
to allow this.  See the [http module settings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-http.html) for more info).



By default responses are deserialized off stream to the object you tell it to.
For debugging purposes it can be very useful to keep a copy of the raw response on the result object. 


[source, csharp]
----
var config = new ConnectionConfiguration()

	.DisableAutomaticProxyDetection()
.EnableHttpCompression()
.DisableDirectStreaming()

var result = client.Search<SearchResponse<object>>(new { size = 12 });
var raw = result.ResponseBodyInBytes;
----
This will only have a value if the client configuration has ExposeRawResponse set 


Please note that this only make sense if you need a mapped response and the raw response at the same time. 
If you need a `string` or `byte[]` response simply call:


[source, csharp]
----
var stringResult = client.Search<string>(new { });
----

Allows you to set querystring parameters that have to be added to every request. For instance, if you use a hosted elasticserch provider, and you need need to pass an `apiKey` parameter onto every request.


Sets proxy information on the connection. 


Sets the global maximum time a connection may take.
Please note that this is the request timeout, the builtin .NET `WebRequest` has no way to set connection timeouts 
(see http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.timeout(v=vs.110).aspx).



As an alternative to the C/go like error checking on `response.IsValid`, you can instead tell the client to throw 
exceptions. 

There are three category of exceptions thay may be thrown:

1) ElasticsearchClientException: These are known exceptions, either an exception that occurred in the request pipeline
(such as max retries or timeout reached, bad authentication, etc...) or Elasticsearch itself returned an error (could 
not parse the request, bad query, missing field, etc...). If it is an Elasticsearch error, the `ServerError` property 
on the response will contain the the actual error that was returned.  The inner exception will always contain the 
root causing exception.

2) UnexpectedElasticsearchClientException:  These are unknown exceptions, for instance a response from Elasticsearch not
properly deserialized.  These are usually bugs and should be reported.  This excpetion also inherits from ElasticsearchClientException
so an additional catch block isn't necessary, but can be helpful in distinguishing between the two.

3) Development time exceptions: These are CLR exceptions like ArgumentException, NullArgumentException etc... that are thrown
when an API in the client is misused.  These should not be handled as you want to know about them during development.




Forces all serialization to be indented and appends `pretty=true` to all the requests so that the responses are indented as well


Sets the HTTP basic authentication credentials to specify with all requests. 

[source, csharp]
----
config = config
	//endhide
	.GlobalQueryStringParameters(new NameValueCollection())
.Proxy(new Uri("http://myproxy"), "username", "pass")
.RequestTimeout(TimeSpan.FromSeconds(4))
.ThrowExceptions()
.PrettyJson()
.BasicAuthentication("username", "password")
----

**Note:** This can alternatively be specified on the node URI directly:


[source, csharp]
----
var uri = new Uri("http://username:password@localhost:9200");

var settings = new ConnectionConfiguration(uri);
----

...but may become tedious when using connection pooling with multiple nodes.



You can pass a callback of type `Action<IApiCallDetails>` that can eaves drop every time a response (good or bad) is created. 
If you have complex logging needs this is a good place to add that in.


[source, csharp]
----
var counter = 0;
var connectionPool = new SingleNodeConnectionPool(new Uri("http://localhost:9200"));
var settings = new ConnectionSettings(connectionPool, new InMemoryConnection())
                .OnRequestCompleted(r => counter++);
var client = new ElasticClient(settings);
client.RootNodeInfo();
counter.Should().Be(1);
client.RootNodeInfoAsync();
counter.Should().Be(2);
----

An example of using `OnRequestCompleted()` for complex logging. Remember, if you would also like 
to capture the request and/or response bytes, you also need to set `.DisableDirectStreaming()`
to `true`


[source, csharp]
----
var list = new List<string>();
var connectionPool = new SingleNodeConnectionPool(new Uri("http://localhost:9200"));
var settings = new ConnectionSettings(connectionPool, new InMemoryConnection())
                .DisableDirectStreaming()
				.OnRequestCompleted(response =>
				{
                    // log out the request
                    if (response.RequestBodyInBytes != null)
                    {
                        list.Add(
                            $"{response.HttpMethod} {response.Uri} \n" +
                            $"{Encoding.UTF8.GetString(response.RequestBodyInBytes)}");
                    }
                    else
                    {
                        list.Add($"{response.HttpMethod} {response.Uri}");
                    }

                    // log out the response
                    if (response.ResponseBodyInBytes != null)
                    {
                        list.Add($"Status: {response.HttpStatusCode}\n" +
                                 $"{Encoding.UTF8.GetString(response.ResponseBodyInBytes)}\n" +
                                 $"{new string('-', 30)}\n");
                    }
                    else
                    {
                        list.Add($"Status: {response.HttpStatusCode}\n" +
                                 $"{new string('-', 30)}\n");
                    }
                });
list.Add(
                            $"{response.HttpMethod} {response.Uri} \n" +
                            $"{Encoding.UTF8.GetString(response.RequestBodyInBytes)}");
list.Add($"{response.HttpMethod} {response.Uri}");
list.Add($"Status: {response.HttpStatusCode}\n" +
                                 $"{Encoding.UTF8.GetString(response.ResponseBodyInBytes)}\n" +
                                 $"{new string('-', 30)}\n");
list.Add($"Status: {response.HttpStatusCode}\n" +
                                 $"{new string('-', 30)}\n");
var client = new ElasticClient(settings);
var syncResponse = client.Search<object>(s => s
                .Scroll("2m")
                .Sort(ss => ss
                    .Ascending(SortSpecialField.DocumentIndexOrder)
                )
            );
list.Count.Should().Be(2);
var asyncResponse = await client.SearchAsync<object>(s => s
                .Scroll("2m")
                .Sort(ss => ss
                    .Ascending(SortSpecialField.DocumentIndexOrder)
                )
            );
list.Count.Should().Be(4);
list.ShouldAllBeEquivalentTo(new []
            {
                "POST http://localhost:9200/_search?scroll=2m \n{\"sort\":[{\"_doc\":{\"order\":\"asc\"}}]}",
                "Status: 200\n------------------------------\n",
                "POST http://localhost:9200/_search?scroll=2m \n{\"sort\":[{\"_doc\":{\"order\":\"asc\"}}]}",
                "Status: 200\n------------------------------\n"
            });
----

## Configuring SSL
SSL must be configured outside of the client using .NET's 
[ServicePointManager](http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager%28v=vs.110%29.aspx)
class and setting the [ServerCertificateValidationCallback](http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.servercertificatevalidationcallback.aspx)
property.

The bare minimum to make .NET accept self-signed SSL certs that are not in the Window's CA store would be to have the callback simply return `true`:


[source, csharp]
----
ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, errors) => true;
----

However, this will accept all requests from the AppDomain to untrusted SSL sites, 
therefore we recommend doing some minimal introspection on the passed in certificate.



## Overriding default Json.NET behavior

Please be advised that this is an expert behavior but if you need to get to the nitty gritty this can be really useful

Create a subclass of the `JsonNetSerializer` 




Override ModifyJsonSerializerSettings if you need access to `JsonSerializerSettings`



You can inject contract resolved converters by implementing the ContractConverters property
This can be much faster then registering them on JsonSerializerSettings.Converters


[source, csharp]
----
public class MyJsonNetSerializer : JsonNetSerializer
{
	public MyJsonNetSerializer(IConnectionSettingsValues settings) : base(settings) { }
public int CallToModify { get; set; } = 0;
	protected override void ModifyJsonSerializerSettings(JsonSerializerSettings settings) => ++CallToModify;
public int CallToContractConverter { get; set; } = 0;
	protected override IList<Func<Type, JsonConverter>> ContractConverters => new List<Func<Type, JsonConverter>>()
	{
		{ t => {
			CallToContractConverter++;
			return null;
		} }
	};

}
----

You can then register a factory on ConnectionSettings to create an instance of your subclass instead. 
This is called once per instance of ConnectionSettings.


[source, csharp]
----
var connectionPool = new SingleNodeConnectionPool(new Uri("http://localhost:9200"));
var settings = new ConnectionSettings(connectionPool, new InMemoryConnection(), s => new MyJsonNetSerializer(s));
var client = new ElasticClient(settings);
client.RootNodeInfo();
client.RootNodeInfo();
var serializer = ((IConnectionSettingsValues)settings).Serializer as MyJsonNetSerializer;
serializer.CallToModify.Should().BeGreaterThan(0);
serializer.SerializeToString(new Project { });
serializer.CallToContractConverter.Should().BeGreaterThan(0);
----
