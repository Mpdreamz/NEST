:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/current

:github: https://github.com/elastic/elasticsearch-net

:imagesdir: ../../images

Allows to control how the _source field is returned  with every hit.
By default operations return the contents of the _source field unless 
 you have used the fields parameter or if the source field is disabled.

[source,javascript,method="expectjson"]
.Example json output
----
{
  "_source": {
    "include": [
      "name",
      "startedOn"
    ]
  }
}
----

=== Fluent DSL Example

[source,csharp,method="fluent"]
----
s => s
.Source(so => so
	.Include(f => f
		.Fields(
			p => p.Name,
			p => p.StartedOn
		)
	)
)
----

=== Object Initializer Syntax Example

[source,csharp,method="initializer"]
----
new SearchRequest<Project>
{
	Source = new SourceFilter
	{
		Include = Fields<Project>(p => p.Name, prop => prop.StartedOn)
	}
}
----

=== Handling Responses

[source,csharp,method="expectresponse"]
----
response.IsValid.Should().BeTrue();
document.Name.Should().NotBeNull();
document.StartedOn.Should().NotBe(default(DateTime));
document.Description.Should().BeNull();
----

[source,csharp,method="unknown"]
----
internal class WithSourceFilterProperty
{
	[JsonProperty("_source")]
	public ISourceFilter SourceFilter { get; set; }
}
----

[source,csharp,method="candeserializeboolean"]
----
var o = base.Deserialize<WithSourceFilterProperty>("{ \"_source\": false }");

o.Should().NotBeNull();

o.SourceFilter.Should().NotBeNull();

o.SourceFilter.Exclude.Should().Contain("*");
----

[source,csharp,method="candeserializearray"]
----
var o = base.Deserialize<WithSourceFilterProperty>("{ \"_source\": [\"obj.*\"] }");

o.Should().NotBeNull();

o.SourceFilter.Should().NotBeNull();

o.SourceFilter.Include.Should().Contain("obj.*");
----

[source,csharp,method="candeserializestring"]
----
var o = base.Deserialize<WithSourceFilterProperty>("{ \"_source\": \"obj.*\" }");

o.Should().NotBeNull();

o.SourceFilter.Should().NotBeNull();

o.SourceFilter.Include.Should().Contain("obj.*");
----

[source,csharp,method="candeserializeobject"]
----
var o = base.Deserialize<WithSourceFilterProperty>("{ \"_source\": { \"include\": [\"obj.*\"], \"exclude\": [\"foo.*\"] } }");

o.Should().NotBeNull();

o.SourceFilter.Should().NotBeNull();

o.SourceFilter.Include.Should().Contain("obj.*");

o.SourceFilter.Exclude.Should().Contain("foo.*");
----

