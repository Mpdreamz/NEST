:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/current

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

[[suggest-api]]
== Suggest API

=== Fluent DSL Example 

=== Fluent DSL Example

[source,csharp]
----
s => s
    .Term("my-term-suggest", t => t
        .MaxEdits(1)
        .MaxInspections(2)
        .MaxTermFrequency(3)
        .MinDocFrequency(4)
        .MinWordLength(5)
        .PrefixLength(6)
        .SuggestMode(SuggestMode.Always)
        .Analyzer("standard")
        .Field(p => p.Name)
        .ShardSize(7)
        .Size(8)
        .Text("hello world")
    )
    .Completion("my-completion-suggest", c => c
        .Context(ctx => ctx
            .Add("color", Project.Projects.First().Suggest.Context.Values.SelectMany(v => v).First())
        )
        .Fuzzy(f => f
            .Fuzziness(Fuzziness.Auto)
            .MinLength(1)
            .PrefixLength(2)
            .Transpositions()
            .UnicodeAware(false)
        )
        .Analyzer("simple")
        .Field(p => p.Suggest)
        .ShardSize(7)
        .Size(8)
        .Text(Project.Instance.Name)
    )
    .Phrase("my-phrase-suggest", ph => ph
        .Collate(c => c
            .Query(q => q
                .Inline("{ \"match\": { \"{{field_name}}\": \"{{suggestion}}\" }}")
                .Params(p => p.Add("field_name", "title"))
            )
            .Prune()
        )
        .Confidence(10.1)
        .DirectGenerator(d => d
            .Field(p => p.Description)
        )
        .GramSize(1)
        .Field(p => p.Name)
        .Text("hello world")
        .RealWordErrorLikelihood(0.5)
    )
----

=== Object Initializer Syntax Example 

[source,csharp]
----
new SuggestRequest
{
    Suggest = new SuggestContainer
    {
        { "my-term-suggest", new SuggestBucket
        {
            Text = "hello world",
            Term = new TermSuggester
            {
                MaxEdits = 1,
                MaxInspections = 2,
                MaxTermFrequency = 3,
                MinDocFrequency = 4,
                MinWordLen = 5,
                PrefixLen = 6,
                SuggestMode = SuggestMode.Always,
                Analyzer = "standard",
                Field = Field<Project>(p=>p.Name),
                ShardSize = 7,
                Size = 8
            }
        } },
        { "my-completion-suggest", new SuggestBucket
        {
            Text = Project.Instance.Name,
            Completion = new CompletionSuggester
            {
                Context = new Dictionary<string, object> { { "color",  Project.Projects.First().Suggest.Context.Values.SelectMany(v => v).First() } },
                Fuzzy = new FuzzySuggester
                {
                    Fuzziness = Fuzziness.Auto,
                    MinLength = 1,
                    PrefixLength = 2,
                    Transpositions = true,
                    UnicodeAware = false
                },
                Analyzer = "simple",
                Field = Field<Project>(p=>p.Suggest),
                ShardSize = 7,
                Size = 8
            }
        } },
        { "my-phrase-suggest", new SuggestBucket
        {
            Text = "hello world",
            Phrase = new PhraseSuggester
            {
                Collate = new PhraseSuggestCollate
                {
                    Query = new InlineScript("{ \"match\": { \"{{field_name}}\": \"{{suggestion}}\" }}")
                    {
                        Params = new Dictionary<string, object>
                        {
                            { "field_name", "title" }
                        }
                    },
                    Prune = true
                },
                Confidence = 10.1,
                DirectGenerator = new List<DirectGenerator>
                {
                    new DirectGenerator { Field = "description" }
                },
                GramSize = 1,
                Field = "name",
                RealWordErrorLikelihood = 0.5
            }
        } },
    }
}
----

=== Handling Responses 

Get the suggestions for a suggester by indexing into
the `.Suggestions` on the response

[source,csharp]
----
var myCompletionSuggest = response.Suggestions["my-completion-suggest"];

myCompletionSuggest.Should().NotBeNull();
var suggest = myCompletionSuggest.First();
suggest.Text.Should().Be(Project.Instance.Name);
suggest.Length.Should().BeGreaterThan(0);
var option = suggest.Options.First();
option.Text.Should().NotBeNullOrEmpty();
option.Score.Should().BeGreaterThan(0);
var payload = option.Payload<ProjectPayload>();
payload.Should().NotBeNull();
payload.Name.Should().Be(Project.Instance.Name);
payload.State.Should().NotBeNull();
----

