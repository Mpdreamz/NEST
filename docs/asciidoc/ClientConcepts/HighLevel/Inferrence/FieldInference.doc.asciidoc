# Strongly typed field access

Several places in the elasticsearch API expect the path to a field from your original source document as a string.
NEST allows you to use C# expressions to strongly type these field path strings.

These expressions are assigned to a type called `Field` and there are several ways to create a instance of that type


Using the constructor directly is possible but rather involved

[source, csharp]
----
var fieldString = new Field { Name = "name" };
----
especially when using C# expressions since these can not be simply new'ed

[source, csharp]
----
Expression<Func<Project, object>> expression = p => p.Name;
----
[source, csharp]
----
var fieldExpression = Field.Create(expression);
Expect("name")
				.WhenSerializing(fieldExpression)
				.WhenSerializing(fieldString);
----
Therefore you can also implicitly convert strings and expressions to Field's

[source, csharp]
----
Field fieldString = "name";
----
but for expressions this is still rather involved 

[source, csharp]
----
Expression<Func<Project, object>> expression = p => p.Name;
----
[source, csharp]
----
Field fieldExpression = expression;
Expect("name")
				.WhenSerializing(fieldExpression)
				.WhenSerializing(fieldString);
----
to ease creating Field's from expressions there is a static Property class you can use

[source, csharp]
----
Field fieldString = "name";
----
but for expressions this is still rather involved 

[source, csharp]
----
var fieldExpression = Infer.Field<Project>(p => p.Name);
----
Using static imports in c# 6 this can be even shortened:
using static Nest.Static; 

[source, csharp]
----
fieldExpression = Field<Project>(p => p.Name);
----
Now this is much much terser then our first example using the constructor! 

[source, csharp]
----
Expect("name")
	.WhenSerializing(fieldString)
	.WhenSerializing(fieldExpression);
----
By default NEST will camelCase all the field names to be more javascripty

using DefaultFieldNameInferrer() on ConnectionSettings you can change this behavior 

[source, csharp]
----
var setup = WithConnectionSettings(s => s.DefaultFieldNameInferrer(p => p.ToUpper()));
----
[source, csharp]
----
setup.Expect("NAME").WhenSerializing(Field<Project>(p => p.Name));
----
However string are *always* passed along verbatim 

[source, csharp]
----
setup.Expect("NaMe").WhenSerializing<Field>("NaMe");
----
if you want the same behavior for expressions simply do nothing in the default inferrer 

[source, csharp]
----
setup = WithConnectionSettings(s => s.DefaultFieldNameInferrer(p => p));
----
[source, csharp]
----
setup.Expect("Name").WhenSerializing(Field<Project>(p => p.Name));
----
Complex field name expressions

You can follow your property expression to any depth, here we are traversing to the LeadDeveloper's (Person) FirstName 

[source, csharp]
----
Expect("leadDeveloper.firstName").WhenSerializing(Field<Project>(p => p.LeadDeveloper.FirstName));
----
When dealing with collection index access is ingnored allowing you to traverse into properties of collections 

[source, csharp]
----
Expect("curatedTags").WhenSerializing(Field<Project>(p => p.CuratedTags[0]));
----
Similarly .First() also works, remember these are expressions and not actual code that will be executed 

[source, csharp]
----
Expect("curatedTags").WhenSerializing(Field<Project>(p => p.CuratedTags.First()));
----
[source, csharp]
----
Expect("curatedTags.added").WhenSerializing(Field<Project>(p => p.CuratedTags[0].Added));
Expect("curatedTags.name").WhenSerializing(Field<Project>(p => p.CuratedTags.First().Name));
----
When we see an indexer on a dictionary we assume they describe property names 

[source, csharp]
----
Expect("metadata.hardcoded").WhenSerializing(Field<Project>(p => p.Metadata["hardcoded"]));
----
[source, csharp]
----
Expect("metadata.hardcoded.created").WhenSerializing(Field<Project>(p => p.Metadata["hardcoded"].Created));
----
A cool feature here is that we'll evaluate variables passed to these indexers 

[source, csharp]
----
var variable = "var";
----
[source, csharp]
----
Expect("metadata.var").WhenSerializing(Field<Project>(p => p.Metadata[variable]));
Expect("metadata.var.created").WhenSerializing(Field<Project>(p => p.Metadata[variable].Created));
----
If you are using elasticearch's multifield mapping (you really should!) these "virtual" sub fields 
do not always map back on to your POCO, by calling .Suffix() you describe the sub fields that do not live in your c# objects

[source, csharp]
----
Expect("leadDeveloper.firstName.raw").WhenSerializing(Field<Project>(p => p.LeadDeveloper.FirstName.Suffix("raw")));
----
[source, csharp]
----
Expect("curatedTags.raw").WhenSerializing(Field<Project>(p => p.CuratedTags[0].Suffix("raw")));
Expect("curatedTags.raw").WhenSerializing(Field<Project>(p => p.CuratedTags.First().Suffix("raw")));
Expect("curatedTags.added.raw").WhenSerializing(Field<Project>(p => p.CuratedTags[0].Added.Suffix("raw")));
Expect("metadata.hardcoded.raw").WhenSerializing(Field<Project>(p => p.Metadata["hardcoded"].Suffix("raw")));
Expect("metadata.hardcoded.created.raw").WhenSerializing(Field<Project>(p => p.Metadata["hardcoded"].Created.Suffix("raw")));
----
You can even chain them to any depth!

[source, csharp]
----
Expect("curatedTags.name.raw.evendeeper").WhenSerializing(Field<Project>(p => p.CuratedTags.First().Name.Suffix("raw").Suffix("evendeeper")));
----
Variables passed to suffix will be evaluated as well 

[source, csharp]
----
var suffix = "unanalyzed";
----
[source, csharp]
----
Expect("metadata.var.unanalyzed").WhenSerializing(Field<Project>(p => p.Metadata[variable].Suffix(suffix)));
Expect("metadata.var.created.unanalyzed").WhenSerializing(Field<Project>(p => p.Metadata[variable].Created.Suffix(suffix)));
----

Suffixes can be appended to expressions. This is useful in cases where you want to apply the same suffix
to a list of fields




[source, csharp]
----
var expressions = new List<Expression<Func<Project, object>>>
{
	p => p.Name,
	p => p.Description,
	p => p.CuratedTags.First().Name,
	p => p.LeadDeveloper.FirstName
};
----
append the suffix "raw" to each expression 

[source, csharp]
----
var fieldExpressions = 
	expressions.Select<Expression<Func<Project, object>>, Field>(e => e.AppendSuffix("raw")).ToList();
----
[source, csharp]
----
Expect("name.raw").WhenSerializing(fieldExpressions[0]);
Expect("description.raw").WhenSerializing(fieldExpressions[1]);
Expect("curatedTags.name.raw").WhenSerializing(fieldExpressions[2]);
Expect("leadDeveloper.firstName.raw").WhenSerializing(fieldExpressions[3]);
----
Annotations 

When using NEST's property attributes you can specify a new name for the properties

[source, csharp]
----
public class BuiltIn
{
	[String(Name = "naam")]
	public string Name { get; set; }
}
----
[source, csharp]
----
Expect("naam").WhenSerializing(Field<BuiltIn>(p => p.Name));
----

Starting with NEST 2.x we also ask the serializer if it can resolve the property to a name.
Here we ask the default JsonNetSerializer and it takes JsonProperty into account

[source, csharp]
----
public class SerializerSpecific
{
	[JsonProperty("nameInJson")]
	public string Name { get; set; }
}
----
[source, csharp]
----
Expect("nameInJson").WhenSerializing(Field<SerializerSpecific>(p => p.Name));
----

If both are specified NEST takes precedence though 

[source, csharp]
----
public class Both
{
	[String(Name = "naam")]
	[JsonProperty("nameInJson")]
	public string Name { get; set; }
}
----
[source, csharp]
----
Expect("naam").WhenSerializing(Field<Both>(p => p.Name));
Expect(new
			{
				naam = "Martijn Laarman"
			}).WhenSerializing(new Both { Name = "Martijn Laarman" });
----
[source, csharp]
----
class A { public C C { get; set; } }
----
[source, csharp]
----
class B { public C C { get; set; } }
----
[source, csharp]
----
class C
{
	public string Name { get; set; }
}
----

Resolving field names is cached but this is per connection settings


[source, csharp]
----
var connectionSettings = TestClient.CreateSettings(forceInMemory: true);
var client = new ElasticClient(connectionSettings);
var fieldNameOnA = client.Infer.Field(Field<A>(p => p.C.Name));
var fieldNameOnB = client.Infer.Field(Field<B>(p => p.C.Name));
----
Here we have to similary shaped expressions on coming from A and on from B
that will resolve to the same field name, as expected

[source, csharp]
----
fieldNameOnA.Should().Be("c.name");
----
[source, csharp]
----
fieldNameOnB.Should().Be("c.name");
----
now we create a new connectionsettings with a remap for C on class A to `d`
now when we resolve the field path for A will be different

[source, csharp]
----
var newConnectionSettings = TestClient.CreateSettings(forceInMemory: true, modifySettings: s => s
	.InferMappingFor<A>(m => m
		.Rename(p => p.C, "d")
	)
);
----
[source, csharp]
----
var newClient = new ElasticClient(newConnectionSettings);
fieldNameOnA = newClient.Infer.Field(Field<A>(p => p.C.Name));
fieldNameOnB = newClient.Infer.Field(Field<B>(p => p.C.Name));
fieldNameOnA.Should().Be("d.name");
fieldNameOnB.Should().Be("c.name");
----
however we didn't break inferrence on the first client instance using its separate connectionsettings 

[source, csharp]
----
fieldNameOnA = client.Infer.Field(Field<A>(p => p.C.Name));
----
[source, csharp]
----
fieldNameOnB = client.Infer.Field(Field<B>(p => p.C.Name));
fieldNameOnA.Should().Be("c.name");
fieldNameOnB.Should().Be("c.name");
----
To wrap up lets showcase the precedence that field names are inferred
1. A hard rename of the property on connection settings using Rename()
2. A NEST property mapping
3. Ask the serializer if the property has a verbatim value e.g it has an explicit JsonPropery attribute.
4. Pass the MemberInfo's Name to the DefaultFieldNameInferrer which by default camelCases
In the following example we have a class where each case wins

[source, csharp]
----
class Precedence
{
----
Eventhough this property has a NEST property mapping and a JsonProperty attribute
We are going to provide a hard rename for it on ConnectionSettings later that should win.

[source, csharp]
----
[String(Name = "renamedIgnoresNest")]
	[JsonProperty("renamedIgnoresJsonProperty")]
	public string RenamedOnConnectionSettings { get; set; }
----
This property has both a NEST attribute and a JsonProperty, NEST should win.

[source, csharp]
----
[String(Name = "nestAtt")]
	[JsonProperty("jsonProp")]
	public string NestAttribute { get; set; }
----
We should take the json property into account by itself 

[source, csharp]
----
[JsonProperty("jsonProp")]
	public string JsonProperty { get; set; }
----
This property we are going to special case in our custom serializer to resolve to `ask` 

[source, csharp]
----
[JsonProperty("dontaskme")]
	public string AskSerializer { get; set; }
----
We are going to register a DefaultFieldNameInferrer on ConnectionSettings 
that will uppercase all properties. 

[source, csharp]
----
public string DefaultFieldNameInferrer { get; set; }

}
----
[source, csharp]
----
var usingSettings = WithConnectionSettings(s => s
----
here we provide an explicit rename of a property on connectionsettings 

[source, csharp]
----
.InferMappingFor<Precedence>(m => m
		.Rename(p => p.RenamedOnConnectionSettings, "renamed")
	)
----
All properties that are not mapped verbatim should be uppercased

[source, csharp]
----
.DefaultFieldNameInferrer(p => p.ToUpperInvariant())
).WithSerializer(s => new CustomSerializer(s));
----
[source, csharp]
----
usingSettings.Expect("renamed").ForField(Field<Precedence>(p => p.RenamedOnConnectionSettings));
usingSettings.Expect("nestAtt").ForField(Field<Precedence>(p => p.NestAttribute));
usingSettings.Expect("jsonProp").ForField(Field<Precedence>(p => p.JsonProperty));
usingSettings.Expect("ask").ForField(Field<Precedence>(p => p.AskSerializer));
usingSettings.Expect("DEFAULTFIELDNAMEINFERRER").ForField(Field<Precedence>(p => p.DefaultFieldNameInferrer));
----
The same rules apply when indexing an object 

[source, csharp]
----
usingSettings.Expect(new [] 
{
	"ask",
	"DEFAULTFIELDNAMEINFERRER",
	"jsonProp",
	"nestAtt",
	"renamed"
}).AsPropertiesOf(new Precedence
{
	RenamedOnConnectionSettings = "renamed on connection settings",
	NestAttribute = "using a nest attribute",
	JsonProperty = "the default serializer resolves json property attributes",
	AskSerializer = "serializer fiddled with this one",
	DefaultFieldNameInferrer = "shouting much?"
});
----
