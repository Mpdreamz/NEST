[source, csharp]
----
var fluentParametersNotNamedSelector =
				from m in typeof (IElasticClient).GetMethods()
				from p in m.GetParameters()
				where p.ParameterType.BaseType() == typeof (MulticastDelegate)
				where !p.Name.Equals("selector")
				select $"method '{nameof(IElasticClient)}.{m.Name}' should have parameter name of 'selector' but has a name of '{p.Name}'";
fluentParametersNotNamedSelector.Should().BeEmpty();
var requestParametersNotNamedRequest =
				from m in typeof(IElasticClient).GetMethods()
				from p in m.GetParameters()
				where typeof(IRequest).IsAssignableFrom(p.ParameterType)
				where !p.Name.Equals("request")
				select $"method '{nameof(IElasticClient)}.{m.Name}' should have parameter name of 'request' but has a name of '{p.Name}'";
requestParametersNotNamedRequest.Should().BeEmpty();
var requestParameters =
				(from m in typeof(IElasticClient).GetMethods()
				 from p in m.GetParameters()
				 where typeof(IRequest).IsAssignableFrom(p.ParameterType)
				 select p).ToList();
requestParameter.HasDefaultValue.Should().BeFalse();
var concreteMethodParametersDoNotMatchInterface = new List<string>();
var interfaceMap = typeof(ElasticClient).GetInterfaceMap(typeof(IElasticClient));
var indexOfInterfaceMethod = Array.IndexOf(interfaceMap.InterfaceMethods, interfaceMethodInfo);
var concreteMethod = interfaceMap.TargetMethods[indexOfInterfaceMethod];
var concreteParameters = concreteMethod.GetParameters();
var interfaceParameters = interfaceMethodInfo.GetParameters();
var parameterInfo = concreteParameters[i];
var interfaceParameter = interfaceParameters[i];
parameterInfo.Name.Should().Be(interfaceParameter.Name);
concreteMethodParametersDoNotMatchInterface.Add(
                            $"'{interfaceParameter.Name}' parameter on concrete implementation of '{nameof(ElasticClient)}.{interfaceMethodInfo.Name}' to {(interfaceParameter.HasDefaultValue ? string.Empty : "NOT")} be optional");
concreteMethodParametersDoNotMatchInterface.Should().BeEmpty();
var methodGroups =
                from methodInfo in typeof(IElasticClient).GetMethods()
                where
                    typeof(IResponse).IsAssignableFrom(methodInfo.ReturnType) ||
                    (methodInfo.ReturnType.IsGeneric()
                     && typeof(Task<>) == methodInfo.ReturnType.GetGenericTypeDefinition()
                     && typeof(IResponse).IsAssignableFrom(methodInfo.ReturnType.GetGenericArguments()[0]))
                let method = new MethodWithRequestParameter(methodInfo)
                group method by method.Name into methodGroup
                select methodGroup;
var parameters = asyncMethod.MethodInfo.GetParameters();
var syncMethod = methodGroup.First(g =>
                        !g.IsAsync
                        && g.MethodType == asyncMethod.MethodType
                        && g.MethodInfo.GetParameters().Length == parameters.Length
                        && (!asyncMethod.MethodInfo.IsGenericMethod ||
                            g.MethodInfo.GetGenericArguments().Length == asyncMethod.MethodInfo.GetGenericArguments().Length));
asyncMethod.Parameter.HasDefaultValue.Should().Be(syncMethod.Parameter.HasDefaultValue,
                        $"sync and async versions of {asyncMethod.MethodType} '{nameof(ElasticClient)}{methodGroup.Key}' should match");
----
