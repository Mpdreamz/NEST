:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/current

:github: https://github.com/elastic/elasticsearch-net

:imagesdir: ../../images

[[distance-units]]
== Distance Units

Whenever distances need to be specified, e.g. for a {ref_current}/query-dsl-geo-distance-query.html[geo distance query], 
the distance unit can be specified as a double number representing distance in meters, as a new instance of 
a `Distance`, or as a string of the form number and distance unit e.g. "`2.72km`"

=== Using Distance units in NEST

NEST uses `Distance` to strongly type distance units and there are several ways to construct one.

==== Constructor

The most straight forward way to construct a `Distance` is through its constructor

[source,csharp,method="constructor"]
----
var unitComposed = new Nest.Distance(25);
var unitComposedWithUnits = new Nest.Distance(25, Nest.DistanceUnit.Meters);
----

`Distance` serializes to a string composed of a factor and distance unit. 
The factor is a double so always has at least one decimal place when serialized

[source,csharp,method="constructor"]
----
Expect("25.0m")
	.WhenSerializing(unitComposed)
	.WhenSerializing(unitComposedWithUnits);
----

==== Implicit conversion

Alternatively a distance unit `string` can be assigned to a `Distance`, resulting in an implicit conversion to a new `Distance` instance. 
If no `DistanceUnit` is specified, the default distance unit is meters

[source,csharp,method="implicitconversion"]
----
Nest.Distance distanceString = "25";

Nest.Distance distanceStringWithUnits = "25m";

Expect(new Nest.Distance(25))
	.WhenSerializing(distanceString)
	.WhenSerializing(distanceStringWithUnits);
----

==== Supported units

A number of distance units are supported, from millimeters to nautical miles

===== Metric

`mm` (Millimeters)

[source,csharp,method="usingdifferentunits"]
----
Expect("2.0mm").WhenSerializing(new Nest.Distance(2, Nest.DistanceUnit.Millimeters));
----

`cm` (Centimeters)

[source,csharp,method="usingdifferentunits"]
----
Expect("123.456cm").WhenSerializing(new Nest.Distance(123.456, Nest.DistanceUnit.Centimeters));
----

`m` (Meters)

[source,csharp,method="usingdifferentunits"]
----
Expect("400.0m").WhenSerializing(new Nest.Distance(400, Nest.DistanceUnit.Meters));
----

`km` (Kilometers)

[source,csharp,method="usingdifferentunits"]
----
Expect("0.1km").WhenSerializing(new Nest.Distance(0.1, Nest.DistanceUnit.Kilometers));
----

===== Imperial

`in` (Inches)

[source,csharp,method="usingdifferentunits"]
----
Expect("43.23in").WhenSerializing(new Nest.Distance(43.23, Nest.DistanceUnit.Inch));
----

`ft` (Feet)

[source,csharp,method="usingdifferentunits"]
----
Expect("3.33ft").WhenSerializing(new Nest.Distance(3.33, Nest.DistanceUnit.Feet));
----

`yd` (Yards)

[source,csharp,method="usingdifferentunits"]
----
Expect("9.0yd").WhenSerializing(new Nest.Distance(9, Nest.DistanceUnit.Yards));
----

`mi` (Miles)

[source,csharp,method="usingdifferentunits"]
----
Expect("0.62mi").WhenSerializing(new Nest.Distance(0.62, Nest.DistanceUnit.Miles));
----

`nmi` or `NM` (Nautical Miles)

[source,csharp,method="usingdifferentunits"]
----
Expect("45.5nmi").WhenSerializing(new Nest.Distance(45.5, Nest.DistanceUnit.NauticalMiles));
----

