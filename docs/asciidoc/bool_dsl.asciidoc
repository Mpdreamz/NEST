:ref_current: http://www.elastic.co/guide/elasticsearch/reference/current

== Bool Queries


Writing boolean queries can grow verbose rather quickly when using the query DSL. For example,
take a single `bool` query with only two clauses


[source, csharp]
----
var searchResults = this.Client.Search<Project>(s => s
				.Query(q => q
					.Bool(b => b
						.Should(
							bs => bs.Term(p => p.Name, "x"),
							bs => bs.Term(p => p.Name, "y")
						)
					)
				)
			);
----
Now, magine multiple nested bools this quickly becomes an exercise in 
_hadouken indenting_

[[indent]]
.hadouken indenting example
image::{imagesdir}/hadouken_indentation.jpg[dead indent]	

=== Operator Overloading
For this reason, NEST introduces **operator overloading** so complex bool queries become easier to write. 
The previous example now becomes the following with the fluent API


[source, csharp]
----
var searchResults = this.Client.Search<Project>(s => s
				.Query(q => q.Term(p => p.Name, "x") || q.Term(p => p.Name, "y"))
			);
----
or, using the object initializer syntax 

[source, csharp]
----
searchResults = this.Client.Search<Project>(new SearchRequest<Project>
{
	Query = new TermQuery { Field = "name", Value= "x" } 
		|| new TermQuery { Field = Field<Project>(p=>p.Name), Value = "y" }
});
----
A naive implementation of operator overloading would rewrite 

`term && term && term` to 

>    bool
>    |___must
>        |___term
>            |___bool
>                |___must
>                    |___term
>                    |___term

As you can image this becomes unwieldy quite fast the more complex a query becomes NEST can spot these and 
join them together to become a single bool query

>    bool
>    |___must 
>        |___term
>        |___term
>        |___term



The bool DSL offers also a short hand notation to mark a query as a `must_not` using the `!` operator 

And to mark a query as a `filter` using the `+` operator

Both of these can be combined with `&&` to form a single bool query  

=== Combining/Merging bool queries

When combining multiple queries some or all possibly marked as `must_not` or `filter`, NEST still combines to a single bool query

>    bool
>    |___must 
>    |   |___term
>    |   |___term
>    |   |___term
>    |
>    |___must_not
>        |___term


[source, csharp]
----
Assert(
				q => q.Query() && q.Query() && q.Query() && !q.Query(),
				Query && Query && Query && !Query,
				c=>
				{
					c.Bool.Must.Should().HaveCount(3);
					c.Bool.MustNot.Should().HaveCount(1);
				});
c.Bool.Must.Should().HaveCount(3);
c.Bool.MustNot.Should().HaveCount(1);
----
Even more involved `term && term && term && !term && +term && +term` still only results in a single bool query:

>    bool
>    |___must 
>    |   |___term
>    |   |___term
>    |   |___term
>    |
>    |___must_not
>    |   |___term
>    |   
>    |___filter
>        |___term
>        |___term


You can still mix and match actual bool queries with the bool DSL e.g

`bool(must=term, term, term) && !term` would still merge into a single bool query. 


=== Locked bool queries
NEST will not combine `bool` queries if any of the query metadata is set e.g if metadata such as `boost` or `name` are set, 
NEST will treat these as locked 

Here we demonstrate that two locked `bool` queries are not combined


neither are two `bool` queries where either the left or the right query is locked 

[source, csharp]
----
c.Bool.Should.Should().HaveCount(2);
var nestedBool = c.Bool.Should.Cast<IQueryContainer>().First(b=>!string.IsNullOrEmpty(b.Bool?.Name));
nestedBool.Bool.Should.Should().HaveCount(1);
nestedBool.Bool.Name.Should().Be(firstName);
assert(fluent.InvokeQuery(new QueryContainerDescriptor<Project>()));
assert((QueryContainer)ois);
----
