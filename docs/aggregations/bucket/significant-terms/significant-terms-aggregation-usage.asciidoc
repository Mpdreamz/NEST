:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/6.1

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Aggregations/Bucket/SignificantTerms/SignificantTermsAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[significant-terms-aggregation-usage]]
=== Significant Terms Aggregation Usage

An aggregation that returns interesting or unusual occurrences of terms in a set.

[WARNING]
--
The significant_terms aggregation can be very heavy when run on large indices. Work is in progress
to provide more lightweight sampling techniques.
As a result, the API for this feature may change in non-backwards compatible ways

--

See the Elasticsearch documentation on {ref_current}/search-aggregations-bucket-significantterms-aggregation.html[significant terms aggregation] for more detail.

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
var sigNames = response.Aggregations.SignificantTerms("significant_names");
sigNames.Should().NotBeNull();
sigNames.DocCount.Should().BeGreaterThan(0);
----

[[significant-terms-pattern-filter]]
[float]
== Filtering with a regular expression pattern

Using significant terms aggregation with filtering to include values using a regular expression pattern

[source,csharp]
----
response.ShouldBeValid();
var sigNames = response.Aggregations.SignificantTerms("significant_names");
sigNames.Should().NotBeNull();
sigNames.DocCount.Should().BeGreaterThan(0);
----

[[significant-terms-exact-value-filter]]
[float]
== Filtering with exact values

Using significant terms aggregation with filtering to exclude specific values

[source,csharp]
----
response.ShouldBeValid();
var sigNames = response.Aggregations.SignificantTerms("significant_names");
sigNames.Should().NotBeNull();
sigNames.DocCount.Should().BeGreaterThan(0);
----

