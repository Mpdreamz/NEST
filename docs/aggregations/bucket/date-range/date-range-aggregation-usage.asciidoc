:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/6.1

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Aggregations/Bucket/DateRange/DateRangeAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[date-range-aggregation-usage]]
=== Date Range Aggregation Usage

A range aggregation that is dedicated for date values. The main difference between this aggregation and the normal range aggregation is that the `from`
and `to` values can be expressed in `DateMath` expressions, and it is also possible to specify a date format by which the from and
to response fields will be returned.

IMPORTANT: this aggregation includes the `from` value and excludes the `to` value for each range.

Be sure to read the Elasticsearch documentation on {ref_current}/search-aggregations-bucket-daterange-aggregation.html[Date Range Aggregation]

=== Handling Responses

The `AggregateDictionary found on `.Aggregations` on `ISearchResponse<T>` has several helper methods
so we can fetch our aggregation results easily in the correct type.
<<handling-aggregate-response, Be sure to read more about these helper methods>>

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var dateHistogram = response.Aggregations.DateRange("projects_date_ranges");
dateHistogram.Should().NotBeNull();
dateHistogram.Buckets.Should().NotBeNull();
----

We specified three ranges so we expect to have three of them in the response 

[source,csharp]
----
dateHistogram.Buckets.Count.Should().Be(3);
foreach (var item in dateHistogram.Buckets)
{
    item.DocCount.Should().BeGreaterThan(0);
}
----

