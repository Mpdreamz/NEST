:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/6.1

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Aggregations/Bucket/DateHistogram/DateHistogramAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[date-histogram-aggregation-usage]]
=== Date Histogram Aggregation Usage

A multi-bucket aggregation similar to the histogram except it can only be applied on date values.
From a functionality perspective, this histogram supports the same features as the normal histogram.
The main difference is that the interval can be specified by date/time expressions.

NOTE: When specifying a `format` **and** `extended_bounds` or `missing`, in order for Elasticsearch to be able to parse
the serialized `DateTime` of `extended_bounds` or `missing` correctly, the `date_optional_time` format is included
as part of the `format` value.

Be sure to read the Elasticsearch documentation on {ref_current}/search-aggregations-bucket-datehistogram-aggregation.html[Date Histogram Aggregation].

=== Handling responses

The `AggregateDictionary found on `.Aggregations` on `ISearchResponse<T>` has several helper methods
so we can fetch our aggregation results easily in the correct type.
<<handling-aggregate-response, Be sure to read more about these helper methods>>

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var dateHistogram = response.Aggregations.DateHistogram("projects_started_per_month");
dateHistogram.Should().NotBeNull();
dateHistogram.Buckets.Should().NotBeNull();
dateHistogram.Buckets.Count.Should().BeGreaterThan(10);
dateHistogram.Buckets.Should().NotBeNull();
dateHistogram.Buckets.Count.Should().BeGreaterThan(0);
foreach (var item in dateHistogram.Buckets)
{
    item.Date.Should().NotBe(default(DateTime));
    item.DocCount.Should().BeGreaterThan(0);

    var nested = item.Nested("project_tags");
    nested.Should().NotBeNull();

    var nestedTerms = nested.Terms("tags");
    nestedTerms.Buckets.Count.Should().BeGreaterThan(0);
}
----

