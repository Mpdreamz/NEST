
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;

///This file contains all the typed enums that the client rest api spec exposes.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit 
namespace Elasticsearch.Net
{
	
	
	public enum ConsistencyOptions 
	{
		  [EnumMember(Value = "one")]
		One,
		[EnumMember(Value = "quorum")]
		Quorum,
		[EnumMember(Value = "all")]
		All
	}
	
	
	public enum ReplicationOptions 
	{
		  [EnumMember(Value = "sync")]
		Sync,
		[EnumMember(Value = "async")]
		Async
	}
	
	
	public enum BytesOptions 
	{
		  [EnumMember(Value = "b")]
		B,
		[EnumMember(Value = "k")]
		K,
		[EnumMember(Value = "m")]
		M,
		[EnumMember(Value = "g")]
		G
	}
	
	
	public enum LevelOptions 
	{
		  [EnumMember(Value = "cluster")]
		Cluster,
		[EnumMember(Value = "indices")]
		Indices,
		[EnumMember(Value = "shards")]
		Shards
	}
	
	
	public enum WaitForStatusOptions 
	{
		  [EnumMember(Value = "green")]
		Green,
		[EnumMember(Value = "yellow")]
		Yellow,
		[EnumMember(Value = "red")]
		Red
	}
	
	
	public enum ExpandWildcardsOptions 
	{
		  [EnumMember(Value = "open")]
		Open,
		[EnumMember(Value = "closed")]
		Closed
	}
	
	
	public enum VersionTypeOptions 
	{
		  [EnumMember(Value = "internal")]
		Internal,
		[EnumMember(Value = "external")]
		External,
		[EnumMember(Value = "external_gte")]
		ExternalGte,
		[EnumMember(Value = "force")]
		Force
	}
	
	
	public enum DefaultOperatorOptions 
	{
		  [EnumMember(Value = "AND")]
		And,
		[EnumMember(Value = "OR")]
		Or
	}
	
	
	public enum OpTypeOptions 
	{
		  [EnumMember(Value = "index")]
		Index,
		[EnumMember(Value = "create")]
		Create
	}
	
	
	public enum FormatOptions 
	{
		  [EnumMember(Value = "detailed")]
		Detailed,
		[EnumMember(Value = "text")]
		Text
	}
	
	
	public enum SearchTypeOptions 
	{
		  [EnumMember(Value = "query_then_fetch")]
		QueryThenFetch,
		[EnumMember(Value = "query_and_fetch")]
		QueryAndFetch,
		[EnumMember(Value = "dfs_query_then_fetch")]
		DfsQueryThenFetch,
		[EnumMember(Value = "dfs_query_and_fetch")]
		DfsQueryAndFetch,
		[EnumMember(Value = "count")]
		Count,
		[EnumMember(Value = "scan")]
		Scan
	}
	
	
	public enum TypeOptions 
	{
		  [EnumMember(Value = "cpu")]
		Cpu,
		[EnumMember(Value = "wait")]
		Wait,
		[EnumMember(Value = "block")]
		Block
	}
	
	
	public enum SuggestModeOptions 
	{
		  [EnumMember(Value = "missing")]
		Missing,
		[EnumMember(Value = "popular")]
		Popular,
		[EnumMember(Value = "always")]
		Always
	}
	
	
	public enum ClusterStateMetric 
	{
		  [EnumMember(Value = "_all")]
		All,
		[EnumMember(Value = "blocks")]
		Blocks,
		[EnumMember(Value = "metadata")]
		Metadata,
		[EnumMember(Value = "nodes")]
		Nodes,
		[EnumMember(Value = "routing_table")]
		RoutingTable,
		[EnumMember(Value = "master_node")]
		MasterNode,
		[EnumMember(Value = "version")]
		Version
	}
	
	
	public enum IndicesStatsMetric 
	{
		  [EnumMember(Value = "_all")]
		All,
		[EnumMember(Value = "completion")]
		Completion,
		[EnumMember(Value = "docs")]
		Docs,
		[EnumMember(Value = "fielddata")]
		Fielddata,
		[EnumMember(Value = "filter_cache")]
		FilterCache,
		[EnumMember(Value = "flush")]
		Flush,
		[EnumMember(Value = "get")]
		Get,
		[EnumMember(Value = "id_cache")]
		IdCache,
		[EnumMember(Value = "indexing")]
		Indexing,
		[EnumMember(Value = "merge")]
		Merge,
		[EnumMember(Value = "percolate")]
		Percolate,
		[EnumMember(Value = "refresh")]
		Refresh,
		[EnumMember(Value = "search")]
		Search,
		[EnumMember(Value = "segments")]
		Segments,
		[EnumMember(Value = "store")]
		Store,
		[EnumMember(Value = "warmer")]
		Warmer
	}
	
	
	public enum NodesInfoMetric 
	{
		  [EnumMember(Value = "settings")]
		Settings,
		[EnumMember(Value = "os")]
		Os,
		[EnumMember(Value = "process")]
		Process,
		[EnumMember(Value = "jvm")]
		Jvm,
		[EnumMember(Value = "thread_pool")]
		ThreadPool,
		[EnumMember(Value = "network")]
		Network,
		[EnumMember(Value = "transport")]
		Transport,
		[EnumMember(Value = "http")]
		Http,
		[EnumMember(Value = "plugins")]
		Plugins
	}
	
	
	public enum NodesStatsMetric 
	{
		  [EnumMember(Value = "_all")]
		All,
		[EnumMember(Value = "breaker")]
		Breaker,
		[EnumMember(Value = "fs")]
		Fs,
		[EnumMember(Value = "http")]
		Http,
		[EnumMember(Value = "indices")]
		Indices,
		[EnumMember(Value = "jvm")]
		Jvm,
		[EnumMember(Value = "network")]
		Network,
		[EnumMember(Value = "os")]
		Os,
		[EnumMember(Value = "process")]
		Process,
		[EnumMember(Value = "thread_pool")]
		ThreadPool,
		[EnumMember(Value = "transport")]
		Transport
	}
	
	
	public enum NodesStatsIndexMetric 
	{
		  [EnumMember(Value = "_all")]
		All,
		[EnumMember(Value = "completion")]
		Completion,
		[EnumMember(Value = "docs")]
		Docs,
		[EnumMember(Value = "fielddata")]
		Fielddata,
		[EnumMember(Value = "filter_cache")]
		FilterCache,
		[EnumMember(Value = "flush")]
		Flush,
		[EnumMember(Value = "get")]
		Get,
		[EnumMember(Value = "id_cache")]
		IdCache,
		[EnumMember(Value = "indexing")]
		Indexing,
		[EnumMember(Value = "merge")]
		Merge,
		[EnumMember(Value = "percolate")]
		Percolate,
		[EnumMember(Value = "refresh")]
		Refresh,
		[EnumMember(Value = "search")]
		Search,
		[EnumMember(Value = "segments")]
		Segments,
		[EnumMember(Value = "store")]
		Store,
		[EnumMember(Value = "warmer")]
		Warmer
	}
	

	public static class KnownEnums
	{
		public static string Resolve(Enum e)
		{
			
			if (e is ConsistencyOptions)
			{
				switch((ConsistencyOptions)e)
				{
					case ConsistencyOptions.One: return "one";
					case ConsistencyOptions.Quorum: return "quorum";
					case ConsistencyOptions.All: return "all";
				}
			}
			
			
			if (e is ReplicationOptions)
			{
				switch((ReplicationOptions)e)
				{
					case ReplicationOptions.Sync: return "sync";
					case ReplicationOptions.Async: return "async";
				}
			}
			
			
			if (e is BytesOptions)
			{
				switch((BytesOptions)e)
				{
					case BytesOptions.B: return "b";
					case BytesOptions.K: return "k";
					case BytesOptions.M: return "m";
					case BytesOptions.G: return "g";
				}
			}
			
			
			if (e is LevelOptions)
			{
				switch((LevelOptions)e)
				{
					case LevelOptions.Cluster: return "cluster";
					case LevelOptions.Indices: return "indices";
					case LevelOptions.Shards: return "shards";
				}
			}
			
			
			if (e is WaitForStatusOptions)
			{
				switch((WaitForStatusOptions)e)
				{
					case WaitForStatusOptions.Green: return "green";
					case WaitForStatusOptions.Yellow: return "yellow";
					case WaitForStatusOptions.Red: return "red";
				}
			}
			
			
			if (e is ExpandWildcardsOptions)
			{
				switch((ExpandWildcardsOptions)e)
				{
					case ExpandWildcardsOptions.Open: return "open";
					case ExpandWildcardsOptions.Closed: return "closed";
				}
			}
			
			
			if (e is VersionTypeOptions)
			{
				switch((VersionTypeOptions)e)
				{
					case VersionTypeOptions.Internal: return "internal";
					case VersionTypeOptions.External: return "external";
					case VersionTypeOptions.ExternalGte: return "external_gte";
					case VersionTypeOptions.Force: return "force";
				}
			}
			
			
			if (e is DefaultOperatorOptions)
			{
				switch((DefaultOperatorOptions)e)
				{
					case DefaultOperatorOptions.And: return "AND";
					case DefaultOperatorOptions.Or: return "OR";
				}
			}
			
			
			if (e is OpTypeOptions)
			{
				switch((OpTypeOptions)e)
				{
					case OpTypeOptions.Index: return "index";
					case OpTypeOptions.Create: return "create";
				}
			}
			
			
			if (e is FormatOptions)
			{
				switch((FormatOptions)e)
				{
					case FormatOptions.Detailed: return "detailed";
					case FormatOptions.Text: return "text";
				}
			}
			
			
			if (e is SearchTypeOptions)
			{
				switch((SearchTypeOptions)e)
				{
					case SearchTypeOptions.QueryThenFetch: return "query_then_fetch";
					case SearchTypeOptions.QueryAndFetch: return "query_and_fetch";
					case SearchTypeOptions.DfsQueryThenFetch: return "dfs_query_then_fetch";
					case SearchTypeOptions.DfsQueryAndFetch: return "dfs_query_and_fetch";
					case SearchTypeOptions.Count: return "count";
					case SearchTypeOptions.Scan: return "scan";
				}
			}
			
			
			if (e is TypeOptions)
			{
				switch((TypeOptions)e)
				{
					case TypeOptions.Cpu: return "cpu";
					case TypeOptions.Wait: return "wait";
					case TypeOptions.Block: return "block";
				}
			}
			
			
			if (e is SuggestModeOptions)
			{
				switch((SuggestModeOptions)e)
				{
					case SuggestModeOptions.Missing: return "missing";
					case SuggestModeOptions.Popular: return "popular";
					case SuggestModeOptions.Always: return "always";
				}
			}
			
			
			if (e is ClusterStateMetric)
			{
				switch((ClusterStateMetric)e)
				{
					case ClusterStateMetric.All: return "_all";
					case ClusterStateMetric.Blocks: return "blocks";
					case ClusterStateMetric.Metadata: return "metadata";
					case ClusterStateMetric.Nodes: return "nodes";
					case ClusterStateMetric.RoutingTable: return "routing_table";
					case ClusterStateMetric.MasterNode: return "master_node";
					case ClusterStateMetric.Version: return "version";
				}
			}
			
			
			if (e is IndicesStatsMetric)
			{
				switch((IndicesStatsMetric)e)
				{
					case IndicesStatsMetric.All: return "_all";
					case IndicesStatsMetric.Completion: return "completion";
					case IndicesStatsMetric.Docs: return "docs";
					case IndicesStatsMetric.Fielddata: return "fielddata";
					case IndicesStatsMetric.FilterCache: return "filter_cache";
					case IndicesStatsMetric.Flush: return "flush";
					case IndicesStatsMetric.Get: return "get";
					case IndicesStatsMetric.IdCache: return "id_cache";
					case IndicesStatsMetric.Indexing: return "indexing";
					case IndicesStatsMetric.Merge: return "merge";
					case IndicesStatsMetric.Percolate: return "percolate";
					case IndicesStatsMetric.Refresh: return "refresh";
					case IndicesStatsMetric.Search: return "search";
					case IndicesStatsMetric.Segments: return "segments";
					case IndicesStatsMetric.Store: return "store";
					case IndicesStatsMetric.Warmer: return "warmer";
				}
			}
			
			
			if (e is NodesInfoMetric)
			{
				switch((NodesInfoMetric)e)
				{
					case NodesInfoMetric.Settings: return "settings";
					case NodesInfoMetric.Os: return "os";
					case NodesInfoMetric.Process: return "process";
					case NodesInfoMetric.Jvm: return "jvm";
					case NodesInfoMetric.ThreadPool: return "thread_pool";
					case NodesInfoMetric.Network: return "network";
					case NodesInfoMetric.Transport: return "transport";
					case NodesInfoMetric.Http: return "http";
					case NodesInfoMetric.Plugins: return "plugins";
				}
			}
			
			
			if (e is NodesStatsMetric)
			{
				switch((NodesStatsMetric)e)
				{
					case NodesStatsMetric.All: return "_all";
					case NodesStatsMetric.Breaker: return "breaker";
					case NodesStatsMetric.Fs: return "fs";
					case NodesStatsMetric.Http: return "http";
					case NodesStatsMetric.Indices: return "indices";
					case NodesStatsMetric.Jvm: return "jvm";
					case NodesStatsMetric.Network: return "network";
					case NodesStatsMetric.Os: return "os";
					case NodesStatsMetric.Process: return "process";
					case NodesStatsMetric.ThreadPool: return "thread_pool";
					case NodesStatsMetric.Transport: return "transport";
				}
			}
			
			
			if (e is NodesStatsIndexMetric)
			{
				switch((NodesStatsIndexMetric)e)
				{
					case NodesStatsIndexMetric.All: return "_all";
					case NodesStatsIndexMetric.Completion: return "completion";
					case NodesStatsIndexMetric.Docs: return "docs";
					case NodesStatsIndexMetric.Fielddata: return "fielddata";
					case NodesStatsIndexMetric.FilterCache: return "filter_cache";
					case NodesStatsIndexMetric.Flush: return "flush";
					case NodesStatsIndexMetric.Get: return "get";
					case NodesStatsIndexMetric.IdCache: return "id_cache";
					case NodesStatsIndexMetric.Indexing: return "indexing";
					case NodesStatsIndexMetric.Merge: return "merge";
					case NodesStatsIndexMetric.Percolate: return "percolate";
					case NodesStatsIndexMetric.Refresh: return "refresh";
					case NodesStatsIndexMetric.Search: return "search";
					case NodesStatsIndexMetric.Segments: return "segments";
					case NodesStatsIndexMetric.Store: return "store";
					case NodesStatsIndexMetric.Warmer: return "warmer";
				}
			}
			
			return "UNKNOWNENUM";
		}
	}
}
 