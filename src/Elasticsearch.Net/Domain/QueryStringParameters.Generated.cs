
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;

///This file contains all the typed querystring parameters that are generated of the client spec.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit 

namespace Elasticsearch.Net
{
	
	
	///<summary>Query string descriptor for Bulk
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html
	///</pre>
	///</summary>
	public class BulkQueryString : FluentQueryString<BulkQueryString> 
	{
		
		internal ConsistencyOptions _consistency { get; set; }
		///<summary>Explicit write consistency setting for the operation</summary>
		public BulkQueryString Consistency(ConsistencyOptions consistency)
		{
			this._consistency = consistency;
			this.Add("consistency", this._consistency);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the index after performing the operation</summary>
		public BulkQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal ReplicationOptions _replication { get; set; }
		///<summary>Explicitely set the replication type</summary>
		public BulkQueryString Replication(ReplicationOptions replication)
		{
			this._replication = replication;
			this.Add("replication", this._replication);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public BulkQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public BulkQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _type { get; set; }
		///<summary>Default document type for items which don&#39;t provide one</summary>
		public BulkQueryString Type(string type)
		{
			this._type = type;
			this.Add("type", this._type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatAliases
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-aliases.html
	///</pre>
	///</summary>
	public class CatAliasesQueryString : FluentQueryString<CatAliasesQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatAliasesQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatAliasesQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatAliasesQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatAliasesQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatAliasesQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatAllocation
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html
	///</pre>
	///</summary>
	public class CatAllocationQueryString : FluentQueryString<CatAllocationQueryString> 
	{
		
		internal BytesOptions _bytes { get; set; }
		///<summary>The unit in which to display byte values</summary>
		public CatAllocationQueryString Bytes(BytesOptions bytes)
		{
			this._bytes = bytes;
			this.Add("bytes", this._bytes);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatAllocationQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatAllocationQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatAllocationQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatAllocationQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatAllocationQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatCount
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html
	///</pre>
	///</summary>
	public class CatCountQueryString : FluentQueryString<CatCountQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatCountQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatCountQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatCountQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatCountQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatCountQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatHealth
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html
	///</pre>
	///</summary>
	public class CatHealthQueryString : FluentQueryString<CatHealthQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatHealthQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatHealthQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatHealthQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatHealthQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _ts { get; set; }
		///<summary>Set to false to disable timestamping</summary>
		public CatHealthQueryString Ts(bool ts)
		{
			this._ts = ts;
			this.Add("ts", this._ts);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatHealthQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatHelp
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html
	///</pre>
	///</summary>
	public class CatHelpQueryString : FluentQueryString<CatHelpQueryString> 
	{
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatHelpQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatIndices
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html
	///</pre>
	///</summary>
	public class CatIndicesQueryString : FluentQueryString<CatIndicesQueryString> 
	{
		
		internal BytesOptions _bytes { get; set; }
		///<summary>The unit in which to display byte values</summary>
		public CatIndicesQueryString Bytes(BytesOptions bytes)
		{
			this._bytes = bytes;
			this.Add("bytes", this._bytes);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatIndicesQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatIndicesQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatIndicesQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatIndicesQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _pri { get; set; }
		///<summary>Set to true to return stats only for primary shards</summary>
		public CatIndicesQueryString Pri(bool pri)
		{
			this._pri = pri;
			this.Add("pri", this._pri);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatIndicesQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatMaster
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html
	///</pre>
	///</summary>
	public class CatMasterQueryString : FluentQueryString<CatMasterQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatMasterQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatMasterQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatMasterQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatMasterQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatMasterQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatNodes
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html
	///</pre>
	///</summary>
	public class CatNodesQueryString : FluentQueryString<CatNodesQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatNodesQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatNodesQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatNodesQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatNodesQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatNodesQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatPendingTasks
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html
	///</pre>
	///</summary>
	public class CatPendingTasksQueryString : FluentQueryString<CatPendingTasksQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatPendingTasksQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatPendingTasksQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatPendingTasksQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatPendingTasksQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatPendingTasksQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatRecovery
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html
	///</pre>
	///</summary>
	public class CatRecoveryQueryString : FluentQueryString<CatRecoveryQueryString> 
	{
		
		internal BytesOptions _bytes { get; set; }
		///<summary>The unit in which to display byte values</summary>
		public CatRecoveryQueryString Bytes(BytesOptions bytes)
		{
			this._bytes = bytes;
			this.Add("bytes", this._bytes);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatRecoveryQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatRecoveryQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatRecoveryQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatRecoveryQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatRecoveryQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatShards
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html
	///</pre>
	///</summary>
	public class CatShardsQueryString : FluentQueryString<CatShardsQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatShardsQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatShardsQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatShardsQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatShardsQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatShardsQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CatThreadPool
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html
	///</pre>
	///</summary>
	public class CatThreadPoolQueryString : FluentQueryString<CatThreadPoolQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatThreadPoolQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatThreadPoolQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _h { get; set; }
		///<summary>Comma-separated list of column names to display</summary>
		public CatThreadPoolQueryString H(params string[] h)
		{
			this._h = h;
			this.Add("h", this._h);
			return this;
		}
		
		
		internal bool _help { get; set; }
		///<summary>Return help information</summary>
		public CatThreadPoolQueryString Help(bool help)
		{
			this._help = help;
			this.Add("help", this._help);
			return this;
		}
		
		
		internal bool _v { get; set; }
		///<summary>Verbose mode. Display column headers</summary>
		public CatThreadPoolQueryString V(bool v)
		{
			this._v = v;
			this.Add("v", this._v);
			return this;
		}
		
		
		internal bool _full_id { get; set; }
		///<summary>Enables displaying the complete node ids</summary>
		public CatThreadPoolQueryString FullId(bool full_id)
		{
			this._full_id = full_id;
			this.Add("full_id", this._full_id);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ClearScroll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
	///</pre>
	///</summary>
	public class ClearScrollQueryString : FluentQueryString<ClearScrollQueryString> 
	{
	}
	
	
	///<summary>Query string descriptor for ClusterGetSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
	///</pre>
	///</summary>
	public class ClusterGetSettingsQueryString : FluentQueryString<ClusterGetSettingsQueryString> 
	{
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterGetSettingsQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterGetSettingsQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public ClusterGetSettingsQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ClusterHealth
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html
	///</pre>
	///</summary>
	public class ClusterHealthQueryString : FluentQueryString<ClusterHealthQueryString> 
	{
		
		internal LevelOptions _level { get; set; }
		///<summary>Specify the level of detail for returned information</summary>
		public ClusterHealthQueryString Level(LevelOptions level)
		{
			this._level = level;
			this.Add("level", this._level);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterHealthQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterHealthQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public ClusterHealthQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal int _wait_for_active_shards { get; set; }
		///<summary>Wait until the specified number of shards is active</summary>
		public ClusterHealthQueryString WaitForActiveShards(int wait_for_active_shards)
		{
			this._wait_for_active_shards = wait_for_active_shards;
			this.Add("wait_for_active_shards", this._wait_for_active_shards);
			return this;
		}
		
		
		internal string _wait_for_nodes { get; set; }
		///<summary>Wait until the specified number of nodes is available</summary>
		public ClusterHealthQueryString WaitForNodes(string wait_for_nodes)
		{
			this._wait_for_nodes = wait_for_nodes;
			this.Add("wait_for_nodes", this._wait_for_nodes);
			return this;
		}
		
		
		internal int _wait_for_relocating_shards { get; set; }
		///<summary>Wait until the specified number of relocating shards is finished</summary>
		public ClusterHealthQueryString WaitForRelocatingShards(int wait_for_relocating_shards)
		{
			this._wait_for_relocating_shards = wait_for_relocating_shards;
			this.Add("wait_for_relocating_shards", this._wait_for_relocating_shards);
			return this;
		}
		
		
		internal WaitForStatusOptions _wait_for_status { get; set; }
		///<summary>Wait until cluster is in a specific state</summary>
		public ClusterHealthQueryString WaitForStatus(WaitForStatusOptions wait_for_status)
		{
			this._wait_for_status = wait_for_status;
			this.Add("wait_for_status", this._wait_for_status);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ClusterPendingTasks
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html
	///</pre>
	///</summary>
	public class ClusterPendingTasksQueryString : FluentQueryString<ClusterPendingTasksQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterPendingTasksQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public ClusterPendingTasksQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ClusterPutSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html
	///</pre>
	///</summary>
	public class ClusterPutSettingsQueryString : FluentQueryString<ClusterPutSettingsQueryString> 
	{
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterPutSettingsQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ClusterReroute
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html
	///</pre>
	///</summary>
	public class ClusterRerouteQueryString : FluentQueryString<ClusterRerouteQueryString> 
	{
		
		internal bool _dry_run { get; set; }
		///<summary>Simulate the operation only and return the resulting state</summary>
		public ClusterRerouteQueryString DryRun(bool dry_run)
		{
			this._dry_run = dry_run;
			this.Add("dry_run", this._dry_run);
			return this;
		}
		
		
		internal bool _filter_metadata { get; set; }
		///<summary>Don&#39;t return cluster state metadata (default: false)</summary>
		public ClusterRerouteQueryString FilterMetadata(bool filter_metadata)
		{
			this._filter_metadata = filter_metadata;
			this.Add("filter_metadata", this._filter_metadata);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterRerouteQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public ClusterRerouteQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ClusterState
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html
	///</pre>
	///</summary>
	public class ClusterStateQueryString : FluentQueryString<ClusterStateQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterStateQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public ClusterStateQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal  string[] _index_templates { get; set; }
		///<summary>A comma separated list to return specific index templates when returning metadata</summary>
		public ClusterStateQueryString IndexTemplates(params string[] index_templates)
		{
			this._index_templates = index_templates;
			this.Add("index_templates", this._index_templates);
			return this;
		}
		
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterStateQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ClusterStats
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html
	///</pre>
	///</summary>
	public class ClusterStatsQueryString : FluentQueryString<ClusterStatsQueryString> 
	{
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterStatsQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
		
		internal bool _human { get; set; }
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public ClusterStatsQueryString Human(bool human)
		{
			this._human = human;
			this.Add("human", this._human);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Count
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html
	///</pre>
	///</summary>
	public class CountQueryString : FluentQueryString<CountQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public CountQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public CountQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public CountQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal int _min_score { get; set; }
		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public CountQueryString MinScore(int min_score)
		{
			this._min_score = min_score;
			this.Add("min_score", this._min_score);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public CountQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public CountQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _source { get; set; }
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public CountQueryString Source(string source)
		{
			this._source = source;
			this.Add("source", this._source);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for CountPercolateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
	///</pre>
	///</summary>
	public class CountPercolateQueryString : FluentQueryString<CountPercolateQueryString> 
	{
		
		internal  string[] _routing { get; set; }
		///<summary>A comma-separated list of specific routing values</summary>
		public CountPercolateQueryString Routing(params string[] routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public CountPercolateQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public CountPercolateQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public CountPercolateQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public CountPercolateQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal string _percolate_index { get; set; }
		///<summary>The index to count percolate the document into. Defaults to index.</summary>
		public CountPercolateQueryString PercolateIndex(string percolate_index)
		{
			this._percolate_index = percolate_index;
			this.Add("percolate_index", this._percolate_index);
			return this;
		}
		
		
		internal string _percolate_type { get; set; }
		///<summary>The type to count percolate document into. Defaults to type.</summary>
		public CountPercolateQueryString PercolateType(string percolate_type)
		{
			this._percolate_type = percolate_type;
			this.Add("percolate_type", this._percolate_type);
			return this;
		}
		
		
		internal int _version { get; set; }
		///<summary>Explicit version number for concurrency control</summary>
		public CountPercolateQueryString Version(int version)
		{
			this._version = version;
			this.Add("version", this._version);
			return this;
		}
		
		
		internal VersionTypeOptions _version_type { get; set; }
		///<summary>Specific version type</summary>
		public CountPercolateQueryString VersionType(VersionTypeOptions version_type)
		{
			this._version_type = version_type;
			this.Add("version_type", this._version_type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Delete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html
	///</pre>
	///</summary>
	public class DeleteQueryString : FluentQueryString<DeleteQueryString> 
	{
		
		internal ConsistencyOptions _consistency { get; set; }
		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteQueryString Consistency(ConsistencyOptions consistency)
		{
			this._consistency = consistency;
			this.Add("consistency", this._consistency);
			return this;
		}
		
		
		internal string _parent { get; set; }
		///<summary>ID of parent document</summary>
		public DeleteQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the index after performing the operation</summary>
		public DeleteQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal ReplicationOptions _replication { get; set; }
		///<summary>Specific replication type</summary>
		public DeleteQueryString Replication(ReplicationOptions replication)
		{
			this._replication = replication;
			this.Add("replication", this._replication);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public DeleteQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public DeleteQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal int _version { get; set; }
		///<summary>Explicit version number for concurrency control</summary>
		public DeleteQueryString Version(int version)
		{
			this._version = version;
			this.Add("version", this._version);
			return this;
		}
		
		
		internal VersionTypeOptions _version_type { get; set; }
		///<summary>Specific version type</summary>
		public DeleteQueryString VersionType(VersionTypeOptions version_type)
		{
			this._version_type = version_type;
			this.Add("version_type", this._version_type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for DeleteByQuery
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html
	///</pre>
	///</summary>
	public class DeleteByQueryQueryString : FluentQueryString<DeleteByQueryQueryString> 
	{
		
		internal string _analyzer { get; set; }
		///<summary>The analyzer to use for the query string</summary>
		public DeleteByQueryQueryString Analyzer(string analyzer)
		{
			this._analyzer = analyzer;
			this.Add("analyzer", this._analyzer);
			return this;
		}
		
		
		internal ConsistencyOptions _consistency { get; set; }
		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteByQueryQueryString Consistency(ConsistencyOptions consistency)
		{
			this._consistency = consistency;
			this.Add("consistency", this._consistency);
			return this;
		}
		
		
		internal DefaultOperatorOptions _default_operator { get; set; }
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DeleteByQueryQueryString DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this._default_operator = default_operator;
			this.Add("default_operator", this._default_operator);
			return this;
		}
		
		
		internal string _df { get; set; }
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public DeleteByQueryQueryString Df(string df)
		{
			this._df = df;
			this.Add("df", this._df);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public DeleteByQueryQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public DeleteByQueryQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public DeleteByQueryQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal ReplicationOptions _replication { get; set; }
		///<summary>Specific replication type</summary>
		public DeleteByQueryQueryString Replication(ReplicationOptions replication)
		{
			this._replication = replication;
			this.Add("replication", this._replication);
			return this;
		}
		
		
		internal string _q { get; set; }
		///<summary>Query in the Lucene query string syntax</summary>
		public DeleteByQueryQueryString Q(string q)
		{
			this._q = q;
			this.Add("q", this._q);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public DeleteByQueryQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _source { get; set; }
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public DeleteByQueryQueryString Source(string source)
		{
			this._source = source;
			this.Add("source", this._source);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public DeleteByQueryQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Exists
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public class ExistsQueryString : FluentQueryString<ExistsQueryString> 
	{
		
		internal string _parent { get; set; }
		///<summary>The ID of the parent document</summary>
		public ExistsQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExistsQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal bool _realtime { get; set; }
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public ExistsQueryString Realtime(bool realtime)
		{
			this._realtime = realtime;
			this.Add("realtime", this._realtime);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public ExistsQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public ExistsQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for ExplainGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html
	///</pre>
	///</summary>
	public class ExplainQueryString : FluentQueryString<ExplainQueryString> 
	{
		
		internal bool _analyze_wildcard { get; set; }
		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public ExplainQueryString AnalyzeWildcard(bool analyze_wildcard)
		{
			this._analyze_wildcard = analyze_wildcard;
			this.Add("analyze_wildcard", this._analyze_wildcard);
			return this;
		}
		
		
		internal string _analyzer { get; set; }
		///<summary>The analyzer for the query string query</summary>
		public ExplainQueryString Analyzer(string analyzer)
		{
			this._analyzer = analyzer;
			this.Add("analyzer", this._analyzer);
			return this;
		}
		
		
		internal DefaultOperatorOptions _default_operator { get; set; }
		///<summary>The default operator for query string query (AND or OR)</summary>
		public ExplainQueryString DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this._default_operator = default_operator;
			this.Add("default_operator", this._default_operator);
			return this;
		}
		
		
		internal string _df { get; set; }
		///<summary>The default field for query string query (default: _all)</summary>
		public ExplainQueryString Df(string df)
		{
			this._df = df;
			this.Add("df", this._df);
			return this;
		}
		
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields to return in the response</summary>
		public ExplainQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal bool _lenient { get; set; }
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public ExplainQueryString Lenient(bool lenient)
		{
			this._lenient = lenient;
			this.Add("lenient", this._lenient);
			return this;
		}
		
		
		internal bool _lowercase_expanded_terms { get; set; }
		///<summary>Specify whether query terms should be lowercased</summary>
		public ExplainQueryString LowercaseExpandedTerms(bool lowercase_expanded_terms)
		{
			this._lowercase_expanded_terms = lowercase_expanded_terms;
			this.Add("lowercase_expanded_terms", this._lowercase_expanded_terms);
			return this;
		}
		
		
		internal string _parent { get; set; }
		///<summary>The ID of the parent document</summary>
		public ExplainQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExplainQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal string _q { get; set; }
		///<summary>Query in the Lucene query string syntax</summary>
		public ExplainQueryString Q(string q)
		{
			this._q = q;
			this.Add("q", this._q);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public ExplainQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _source { get; set; }
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ExplainQueryString Source(string source)
		{
			this._source = source;
			this.Add("source", this._source);
			return this;
		}
		
		
		internal  string[] __source { get; set; }
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public ExplainQueryString Source(params string[] _source)
		{
			this.__source = _source;
			this.Add("_source", this.__source);
			return this;
		}
		
		
		internal IEnumerable<object> __source_exclude { get; set; }
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public ExplainQueryString SourceExclude(params string[] _source_exclude)
		{
			this.__source_exclude = _source_exclude.Select(f=>(object)f);
			this.Add("_source_exclude", this.__source_exclude);
			return this;
		}
		
		
		internal IEnumerable<object> __source_include { get; set; }
		///<summary>A list of fields to extract and return from the _source field</summary>
		public ExplainQueryString SourceInclude(params string[] _source_include)
		{
			this.__source_include = _source_include.Select(f=>(object)f);
			this.Add("_source_include", this.__source_include);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Get
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public class GetQueryString : FluentQueryString<GetQueryString> 
	{
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields to return in the response</summary>
		public GetQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal string _parent { get; set; }
		///<summary>The ID of the parent document</summary>
		public GetQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal bool _realtime { get; set; }
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetQueryString Realtime(bool realtime)
		{
			this._realtime = realtime;
			this.Add("realtime", this._realtime);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public GetQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal  string[] __source { get; set; }
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public GetQueryString Source(params string[] _source)
		{
			this.__source = _source;
			this.Add("_source", this.__source);
			return this;
		}
		
		
		internal IEnumerable<object> __source_exclude { get; set; }
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetQueryString SourceExclude(params string[] _source_exclude)
		{
			this.__source_exclude = _source_exclude.Select(f=>(object)f);
			this.Add("_source_exclude", this.__source_exclude);
			return this;
		}
		
		
		internal IEnumerable<object> __source_include { get; set; }
		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetQueryString SourceInclude(params string[] _source_include)
		{
			this.__source_include = _source_include.Select(f=>(object)f);
			this.Add("_source_include", this.__source_include);
			return this;
		}
		
		
		internal int _version { get; set; }
		///<summary>Explicit version number for concurrency control</summary>
		public GetQueryString Version(int version)
		{
			this._version = version;
			this.Add("version", this._version);
			return this;
		}
		
		
		internal VersionTypeOptions _version_type { get; set; }
		///<summary>Specific version type</summary>
		public GetQueryString VersionType(VersionTypeOptions version_type)
		{
			this._version_type = version_type;
			this.Add("version_type", this._version_type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for GetSource
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html
	///</pre>
	///</summary>
	public class SourceQueryString : FluentQueryString<SourceQueryString> 
	{
		
		internal string _parent { get; set; }
		///<summary>The ID of the parent document</summary>
		public SourceQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SourceQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal bool _realtime { get; set; }
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public SourceQueryString Realtime(bool realtime)
		{
			this._realtime = realtime;
			this.Add("realtime", this._realtime);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public SourceQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public SourceQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal  string[] __source { get; set; }
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public SourceQueryString Source(params string[] _source)
		{
			this.__source = _source;
			this.Add("_source", this.__source);
			return this;
		}
		
		
		internal IEnumerable<object> __source_exclude { get; set; }
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public SourceQueryString SourceExclude(params string[] _source_exclude)
		{
			this.__source_exclude = _source_exclude.Select(f=>(object)f);
			this.Add("_source_exclude", this.__source_exclude);
			return this;
		}
		
		
		internal IEnumerable<object> __source_include { get; set; }
		///<summary>A list of fields to extract and return from the _source field</summary>
		public SourceQueryString SourceInclude(params string[] _source_include)
		{
			this.__source_include = _source_include.Select(f=>(object)f);
			this.Add("_source_include", this.__source_include);
			return this;
		}
		
		
		internal int _version { get; set; }
		///<summary>Explicit version number for concurrency control</summary>
		public SourceQueryString Version(int version)
		{
			this._version = version;
			this.Add("version", this._version);
			return this;
		}
		
		
		internal VersionTypeOptions _version_type { get; set; }
		///<summary>Specific version type</summary>
		public SourceQueryString VersionType(VersionTypeOptions version_type)
		{
			this._version_type = version_type;
			this.Add("version_type", this._version_type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Index
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html
	///</pre>
	///</summary>
	public class IndexQueryString : FluentQueryString<IndexQueryString> 
	{
		
		internal ConsistencyOptions _consistency { get; set; }
		///<summary>Explicit write consistency setting for the operation</summary>
		public IndexQueryString Consistency(ConsistencyOptions consistency)
		{
			this._consistency = consistency;
			this.Add("consistency", this._consistency);
			return this;
		}
		
		
		internal OpTypeOptions _op_type { get; set; }
		///<summary>Explicit operation type</summary>
		public IndexQueryString OpType(OpTypeOptions op_type)
		{
			this._op_type = op_type;
			this.Add("op_type", this._op_type);
			return this;
		}
		
		
		internal string _parent { get; set; }
		///<summary>ID of the parent document</summary>
		public IndexQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the index after performing the operation</summary>
		public IndexQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal ReplicationOptions _replication { get; set; }
		///<summary>Specific replication type</summary>
		public IndexQueryString Replication(ReplicationOptions replication)
		{
			this._replication = replication;
			this.Add("replication", this._replication);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public IndexQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public IndexQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _timestamp { get; set; }
		///<summary>Explicit timestamp for the document</summary>
		public IndexQueryString Timestamp(string timestamp)
		{
			this._timestamp = timestamp;
			this.Add("timestamp", this._timestamp);
			return this;
		}
		
		
		internal string _ttl { get; set; }
		///<summary>Expiration time for the document</summary>
		public IndexQueryString Ttl(string ttl)
		{
			this._ttl = ttl;
			this.Add("ttl", this._ttl);
			return this;
		}
		
		
		internal int _version { get; set; }
		///<summary>Explicit version number for concurrency control</summary>
		public IndexQueryString Version(int version)
		{
			this._version = version;
			this.Add("version", this._version);
			return this;
		}
		
		
		internal VersionTypeOptions _version_type { get; set; }
		///<summary>Specific version type</summary>
		public IndexQueryString VersionType(VersionTypeOptions version_type)
		{
			this._version_type = version_type;
			this.Add("version_type", this._version_type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesAnalyzeGetForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html
	///</pre>
	///</summary>
	public class AnalyzeQueryString : FluentQueryString<AnalyzeQueryString> 
	{
		
		internal string _analyzer { get; set; }
		///<summary>The name of the analyzer to use</summary>
		public AnalyzeQueryString Analyzer(string analyzer)
		{
			this._analyzer = analyzer;
			this.Add("analyzer", this._analyzer);
			return this;
		}
		
		
		internal object _field { get; set; }
		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public AnalyzeQueryString Field(string field)
		{
			this._field = field;
			this.Add("field", this._field);
			return this;
		}
		
		
		internal  string[] _filters { get; set; }
		///<summary>A comma-separated list of filters to use for the analysis</summary>
		public AnalyzeQueryString Filters(params string[] filters)
		{
			this._filters = filters;
			this.Add("filters", this._filters);
			return this;
		}
		
		
		internal string _index { get; set; }
		///<summary>The name of the index to scope the operation</summary>
		public AnalyzeQueryString Index(string index)
		{
			this._index = index;
			this.Add("index", this._index);
			return this;
		}
		
		
		internal bool _prefer_local { get; set; }
		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public AnalyzeQueryString PreferLocal(bool prefer_local)
		{
			this._prefer_local = prefer_local;
			this.Add("prefer_local", this._prefer_local);
			return this;
		}
		
		
		internal string _text { get; set; }
		///<summary>The text on which the analysis should be performed (when request body is not used)</summary>
		public AnalyzeQueryString Text(string text)
		{
			this._text = text;
			this.Add("text", this._text);
			return this;
		}
		
		
		internal string _tokenizer { get; set; }
		///<summary>The name of the tokenizer to use for the analysis</summary>
		public AnalyzeQueryString Tokenizer(string tokenizer)
		{
			this._tokenizer = tokenizer;
			this.Add("tokenizer", this._tokenizer);
			return this;
		}
		
		
		internal FormatOptions _format { get; set; }
		///<summary>Format of the output</summary>
		public AnalyzeQueryString Format(FormatOptions format)
		{
			this._format = format;
			this.Add("format", this._format);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesClearCacheForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html
	///</pre>
	///</summary>
	public class ClearCacheQueryString : FluentQueryString<ClearCacheQueryString> 
	{
		
		internal bool _field_data { get; set; }
		///<summary>Clear field data</summary>
		public ClearCacheQueryString FieldData(bool field_data)
		{
			this._field_data = field_data;
			this.Add("field_data", this._field_data);
			return this;
		}
		
		
		internal bool _fielddata { get; set; }
		///<summary>Clear field data</summary>
		public ClearCacheQueryString Fielddata(bool fielddata)
		{
			this._fielddata = fielddata;
			this.Add("fielddata", this._fielddata);
			return this;
		}
		
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public ClearCacheQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal bool _filter { get; set; }
		///<summary>Clear filter caches</summary>
		public ClearCacheQueryString Filter(bool filter)
		{
			this._filter = filter;
			this.Add("filter", this._filter);
			return this;
		}
		
		
		internal bool _filter_cache { get; set; }
		///<summary>Clear filter caches</summary>
		public ClearCacheQueryString FilterCache(bool filter_cache)
		{
			this._filter_cache = filter_cache;
			this.Add("filter_cache", this._filter_cache);
			return this;
		}
		
		
		internal bool _filter_keys { get; set; }
		///<summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
		public ClearCacheQueryString FilterKeys(bool filter_keys)
		{
			this._filter_keys = filter_keys;
			this.Add("filter_keys", this._filter_keys);
			return this;
		}
		
		
		internal bool _id { get; set; }
		///<summary>Clear ID caches for parent/child</summary>
		public ClearCacheQueryString Id(bool id)
		{
			this._id = id;
			this.Add("id", this._id);
			return this;
		}
		
		
		internal bool _id_cache { get; set; }
		///<summary>Clear ID caches for parent/child</summary>
		public ClearCacheQueryString IdCache(bool id_cache)
		{
			this._id_cache = id_cache;
			this.Add("id_cache", this._id_cache);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public ClearCacheQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public ClearCacheQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ClearCacheQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal  string[] _index { get; set; }
		///<summary>A comma-separated list of index name to limit the operation</summary>
		public ClearCacheQueryString Index(params string[] index)
		{
			this._index = index;
			this.Add("index", this._index);
			return this;
		}
		
		
		internal bool _recycler { get; set; }
		///<summary>Clear the recycler cache</summary>
		public ClearCacheQueryString Recycler(bool recycler)
		{
			this._recycler = recycler;
			this.Add("recycler", this._recycler);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesClose
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
	///</pre>
	///</summary>
	public class CloseIndexQueryString : FluentQueryString<CloseIndexQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public CloseIndexQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public CloseIndexQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public CloseIndexQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public CloseIndexQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public CloseIndexQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesCreate
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html
	///</pre>
	///</summary>
	public class CreateIndexQueryString : FluentQueryString<CreateIndexQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public CreateIndexQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public CreateIndexQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesDelete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html
	///</pre>
	///</summary>
	public class DeleteIndexQueryString : FluentQueryString<DeleteIndexQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public DeleteIndexQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public DeleteIndexQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesDeleteAlias
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public class IndicesDeleteAliasQueryString : FluentQueryString<IndicesDeleteAliasQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit timestamp for the document</summary>
		public IndicesDeleteAliasQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteAliasQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesDeleteMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html
	///</pre>
	///</summary>
	public class DeleteMappingQueryString : FluentQueryString<DeleteMappingQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public DeleteMappingQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesDeleteTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public class DeleteTemplateQueryString : FluentQueryString<DeleteTemplateQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public DeleteTemplateQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public DeleteTemplateQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesDeleteWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
	///</pre>
	///</summary>
	public class DeleteWarmerQueryString : FluentQueryString<DeleteWarmerQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public DeleteWarmerQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesExists
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html
	///</pre>
	///</summary>
	public class IndexExistsQueryString : FluentQueryString<IndexExistsQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public IndexExistsQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public IndexExistsQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public IndexExistsQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public IndexExistsQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesExistsAliasForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public class IndicesExistsAliasQueryString : FluentQueryString<IndicesExistsAliasQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public IndicesExistsAliasQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public IndicesExistsAliasQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public IndicesExistsAliasQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public IndicesExistsAliasQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesExistsTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public class IndicesExistsTemplateQueryString : FluentQueryString<IndicesExistsTemplateQueryString> 
	{
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public IndicesExistsTemplateQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesExistsType
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html
	///</pre>
	///</summary>
	public class IndicesExistsTypeQueryString : FluentQueryString<IndicesExistsTypeQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public IndicesExistsTypeQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public IndicesExistsTypeQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public IndicesExistsTypeQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public IndicesExistsTypeQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesFlushForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html
	///</pre>
	///</summary>
	public class FlushQueryString : FluentQueryString<FlushQueryString> 
	{
		
		internal bool _force { get; set; }
		///<summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
		public FlushQueryString Force(bool force)
		{
			this._force = force;
			this.Add("force", this._force);
			return this;
		}
		
		
		internal bool _full { get; set; }
		///<summary>If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)</summary>
		public FlushQueryString Full(bool full)
		{
			this._full = full;
			this.Add("full", this._full);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public FlushQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public FlushQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public FlushQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesGetAliasForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public class GetAliasesQueryString : FluentQueryString<GetAliasesQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetAliasesQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetAliasesQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetAliasesQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetAliasesQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesGetAliasesForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public class IndicesGetAliasesQueryString : FluentQueryString<IndicesGetAliasesQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public IndicesGetAliasesQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public IndicesGetAliasesQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesGetFieldMappingForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html
	///</pre>
	///</summary>
	public class IndicesGetFieldMappingQueryString : FluentQueryString<IndicesGetFieldMappingQueryString> 
	{
		
		internal bool _include_defaults { get; set; }
		///<summary>Whether the default mapping values should be returned as well</summary>
		public IndicesGetFieldMappingQueryString IncludeDefaults(bool include_defaults)
		{
			this._include_defaults = include_defaults;
			this.Add("include_defaults", this._include_defaults);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public IndicesGetFieldMappingQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public IndicesGetFieldMappingQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public IndicesGetFieldMappingQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public IndicesGetFieldMappingQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesGetMappingForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
	///</pre>
	///</summary>
	public class GetMappingQueryString : FluentQueryString<GetMappingQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetMappingQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetMappingQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetMappingQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetMappingQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesGetSettingsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html
	///</pre>
	///</summary>
	public class GetIndexSettingsQueryString : FluentQueryString<GetIndexSettingsQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetIndexSettingsQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetIndexSettingsQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetIndexSettingsQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public GetIndexSettingsQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetIndexSettingsQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesGetTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public class GetTemplateQueryString : FluentQueryString<GetTemplateQueryString> 
	{
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public GetTemplateQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetTemplateQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesGetWarmerForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
	///</pre>
	///</summary>
	public class GetWarmerQueryString : FluentQueryString<GetWarmerQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetWarmerQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetWarmerQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetWarmerQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetWarmerQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesOpen
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html
	///</pre>
	///</summary>
	public class OpenIndexQueryString : FluentQueryString<OpenIndexQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public OpenIndexQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public OpenIndexQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public OpenIndexQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public OpenIndexQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public OpenIndexQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesOptimizeForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html
	///</pre>
	///</summary>
	public class OptimizeQueryString : FluentQueryString<OptimizeQueryString> 
	{
		
		internal bool _flush { get; set; }
		///<summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
		public OptimizeQueryString Flush(bool flush)
		{
			this._flush = flush;
			this.Add("flush", this._flush);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public OptimizeQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public OptimizeQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public OptimizeQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal int _max_num_segments { get; set; }
		///<summary>The number of segments the index should be merged into (default: dynamic)</summary>
		public OptimizeQueryString MaxNumSegments(int max_num_segments)
		{
			this._max_num_segments = max_num_segments;
			this.Add("max_num_segments", this._max_num_segments);
			return this;
		}
		
		
		internal bool _only_expunge_deletes { get; set; }
		///<summary>Specify whether the operation should only expunge deleted documents</summary>
		public OptimizeQueryString OnlyExpungeDeletes(bool only_expunge_deletes)
		{
			this._only_expunge_deletes = only_expunge_deletes;
			this.Add("only_expunge_deletes", this._only_expunge_deletes);
			return this;
		}
		
		
		internal string _operation_threading { get; set; }
		///<summary>TODO: ?</summary>
		public OptimizeQueryString OperationThreading(string operation_threading)
		{
			this._operation_threading = operation_threading;
			this.Add("operation_threading", this._operation_threading);
			return this;
		}
		
		
		internal bool _wait_for_merge { get; set; }
		///<summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
		public OptimizeQueryString WaitForMerge(bool wait_for_merge)
		{
			this._wait_for_merge = wait_for_merge;
			this.Add("wait_for_merge", this._wait_for_merge);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesPutAlias
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public class IndicesPutAliasQueryString : FluentQueryString<IndicesPutAliasQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit timestamp for the document</summary>
		public IndicesPutAliasQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutAliasQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesPutMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html
	///</pre>
	///</summary>
	public class PutMappingQueryString : FluentQueryString<PutMappingQueryString> 
	{
		
		internal bool _ignore_conflicts { get; set; }
		///<summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
		public PutMappingQueryString IgnoreConflicts(bool ignore_conflicts)
		{
			this._ignore_conflicts = ignore_conflicts;
			this.Add("ignore_conflicts", this._ignore_conflicts);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public PutMappingQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public PutMappingQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public PutMappingQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public PutMappingQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public PutMappingQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesPutSettingsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html
	///</pre>
	///</summary>
	public class UpdateSettingsQueryString : FluentQueryString<UpdateSettingsQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public UpdateSettingsQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public UpdateSettingsQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public UpdateSettingsQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public UpdateSettingsQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public UpdateSettingsQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesPutTemplateForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html
	///</pre>
	///</summary>
	public class PutTemplateQueryString : FluentQueryString<PutTemplateQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public PutTemplateQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public PutTemplateQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public PutTemplateQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesPutWarmerForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html
	///</pre>
	///</summary>
	public class PutWarmerQueryString : FluentQueryString<PutWarmerQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public PutWarmerQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm</summary>
		public PutWarmerQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)</summary>
		public PutWarmerQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.</summary>
		public PutWarmerQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesRefreshForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html
	///</pre>
	///</summary>
	public class RefreshQueryString : FluentQueryString<RefreshQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public RefreshQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public RefreshQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public RefreshQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _force { get; set; }
		///<summary>Force a refresh even if not required</summary>
		public RefreshQueryString Force(bool force)
		{
			this._force = force;
			this.Add("force", this._force);
			return this;
		}
		
		
		internal string _operation_threading { get; set; }
		///<summary>TODO: ?</summary>
		public RefreshQueryString OperationThreading(string operation_threading)
		{
			this._operation_threading = operation_threading;
			this.Add("operation_threading", this._operation_threading);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesSegmentsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html
	///</pre>
	///</summary>
	public class SegmentsQueryString : FluentQueryString<SegmentsQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SegmentsQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SegmentsQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SegmentsQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _human { get; set; }
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public SegmentsQueryString Human(bool human)
		{
			this._human = human;
			this.Add("human", this._human);
			return this;
		}
		
		
		internal string _operation_threading { get; set; }
		///<summary>TODO: ?</summary>
		public SegmentsQueryString OperationThreading(string operation_threading)
		{
			this._operation_threading = operation_threading;
			this.Add("operation_threading", this._operation_threading);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesSnapshotIndexForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-gateway-snapshot.html
	///</pre>
	///</summary>
	public class SnapshotQueryString : FluentQueryString<SnapshotQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SnapshotQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SnapshotQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SnapshotQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesStatsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html
	///</pre>
	///</summary>
	public class IndicesStatsQueryString : FluentQueryString<IndicesStatsQueryString> 
	{
		
		internal IEnumerable<object> _completion_fields { get; set; }
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public IndicesStatsQueryString CompletionFields(params string[] completion_fields)
		{
			this._completion_fields = completion_fields.Select(f=>(object)f);
			this.Add("completion_fields", this._completion_fields);
			return this;
		}
		
		
		internal IEnumerable<object> _fielddata_fields { get; set; }
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public IndicesStatsQueryString FielddataFields(params string[] fielddata_fields)
		{
			this._fielddata_fields = fielddata_fields.Select(f=>(object)f);
			this.Add("fielddata_fields", this._fielddata_fields);
			return this;
		}
		
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public IndicesStatsQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal bool _groups { get; set; }
		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public IndicesStatsQueryString Groups(bool groups)
		{
			this._groups = groups;
			this.Add("groups", this._groups);
			return this;
		}
		
		
		internal bool _human { get; set; }
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public IndicesStatsQueryString Human(bool human)
		{
			this._human = human;
			this.Add("human", this._human);
			return this;
		}
		
		
		internal LevelOptions _level { get; set; }
		///<summary>Return stats aggregated at cluster, index or shard level</summary>
		public IndicesStatsQueryString Level(LevelOptions level)
		{
			this._level = level;
			this.Add("level", this._level);
			return this;
		}
		
		
		internal  string[] _types { get; set; }
		///<summary>A comma-separated list of document types for the `indexing` index metric</summary>
		public IndicesStatsQueryString Types(params string[] types)
		{
			this._types = types;
			this.Add("types", this._types);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesStatusForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html
	///</pre>
	///</summary>
	public class IndicesStatusQueryString : FluentQueryString<IndicesStatusQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public IndicesStatusQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public IndicesStatusQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public IndicesStatusQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal bool _human { get; set; }
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public IndicesStatusQueryString Human(bool human)
		{
			this._human = human;
			this.Add("human", this._human);
			return this;
		}
		
		
		internal string _operation_threading { get; set; }
		///<summary>TODO: ?</summary>
		public IndicesStatusQueryString OperationThreading(string operation_threading)
		{
			this._operation_threading = operation_threading;
			this.Add("operation_threading", this._operation_threading);
			return this;
		}
		
		
		internal bool _recovery { get; set; }
		///<summary>Return information about shard recovery</summary>
		public IndicesStatusQueryString Recovery(bool recovery)
		{
			this._recovery = recovery;
			this.Add("recovery", this._recovery);
			return this;
		}
		
		
		internal bool _snapshot { get; set; }
		///<summary>TODO: ?</summary>
		public IndicesStatusQueryString Snapshot(bool snapshot)
		{
			this._snapshot = snapshot;
			this.Add("snapshot", this._snapshot);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesUpdateAliasesForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html
	///</pre>
	///</summary>
	public class AliasQueryString : FluentQueryString<AliasQueryString> 
	{
		
		internal string _timeout { get; set; }
		///<summary>Request timeout</summary>
		public AliasQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _master_timeout { get; set; }
		///<summary>Specify timeout for connection to master</summary>
		public AliasQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for IndicesValidateQueryGetForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html
	///</pre>
	///</summary>
	public class ValidateQueryQueryString : FluentQueryString<ValidateQueryQueryString> 
	{
		
		internal bool _explain { get; set; }
		///<summary>Return detailed information about the error</summary>
		public ValidateQueryQueryString Explain(bool explain)
		{
			this._explain = explain;
			this.Add("explain", this._explain);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public ValidateQueryQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public ValidateQueryQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ValidateQueryQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal string _operation_threading { get; set; }
		///<summary>TODO: ?</summary>
		public ValidateQueryQueryString OperationThreading(string operation_threading)
		{
			this._operation_threading = operation_threading;
			this.Add("operation_threading", this._operation_threading);
			return this;
		}
		
		
		internal string _source { get; set; }
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ValidateQueryQueryString Source(string source)
		{
			this._source = source;
			this.Add("source", this._source);
			return this;
		}
		
		
		internal string _q { get; set; }
		///<summary>Query in the Lucene query string syntax</summary>
		public ValidateQueryQueryString Q(string q)
		{
			this._q = q;
			this.Add("q", this._q);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Info
	///<pre>
	///http://www.elasticsearch.org/guide/
	///</pre>
	///</summary>
	public class InfoQueryString : FluentQueryString<InfoQueryString> 
	{
	}
	
	
	///<summary>Query string descriptor for MgetGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html
	///</pre>
	///</summary>
	public class MultiGetQueryString : FluentQueryString<MultiGetQueryString> 
	{
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields to return in the response</summary>
		public MultiGetQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public MultiGetQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal bool _realtime { get; set; }
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public MultiGetQueryString Realtime(bool realtime)
		{
			this._realtime = realtime;
			this.Add("realtime", this._realtime);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public MultiGetQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal  string[] __source { get; set; }
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public MultiGetQueryString Source(params string[] _source)
		{
			this.__source = _source;
			this.Add("_source", this.__source);
			return this;
		}
		
		
		internal IEnumerable<object> __source_exclude { get; set; }
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public MultiGetQueryString SourceExclude(params string[] _source_exclude)
		{
			this.__source_exclude = _source_exclude.Select(f=>(object)f);
			this.Add("_source_exclude", this.__source_exclude);
			return this;
		}
		
		
		internal IEnumerable<object> __source_include { get; set; }
		///<summary>A list of fields to extract and return from the _source field</summary>
		public MultiGetQueryString SourceInclude(params string[] _source_include)
		{
			this.__source_include = _source_include.Select(f=>(object)f);
			this.Add("_source_include", this.__source_include);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for MltGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html
	///</pre>
	///</summary>
	public class MoreLikeThisQueryString : FluentQueryString<MoreLikeThisQueryString> 
	{
		
		internal double _boost_terms { get; set; }
		///<summary>The boost factor</summary>
		public MoreLikeThisQueryString BoostTerms(double boost_terms)
		{
			this._boost_terms = boost_terms;
			this.Add("boost_terms", this._boost_terms);
			return this;
		}
		
		
		internal int _max_doc_freq { get; set; }
		///<summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
		public MoreLikeThisQueryString MaxDocFreq(int max_doc_freq)
		{
			this._max_doc_freq = max_doc_freq;
			this.Add("max_doc_freq", this._max_doc_freq);
			return this;
		}
		
		
		internal int _max_query_terms { get; set; }
		///<summary>The maximum query terms to be included in the generated query</summary>
		public MoreLikeThisQueryString MaxQueryTerms(int max_query_terms)
		{
			this._max_query_terms = max_query_terms;
			this.Add("max_query_terms", this._max_query_terms);
			return this;
		}
		
		
		internal int _max_word_length { get; set; }
		///<summary>The minimum length of the word: longer words will be ignored</summary>
		public MoreLikeThisQueryString MaxWordLength(int max_word_length)
		{
			this._max_word_length = max_word_length;
			this.Add("max_word_length", this._max_word_length);
			return this;
		}
		
		
		internal int _min_doc_freq { get; set; }
		///<summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
		public MoreLikeThisQueryString MinDocFreq(int min_doc_freq)
		{
			this._min_doc_freq = min_doc_freq;
			this.Add("min_doc_freq", this._min_doc_freq);
			return this;
		}
		
		
		internal int _min_term_freq { get; set; }
		///<summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
		public MoreLikeThisQueryString MinTermFreq(int min_term_freq)
		{
			this._min_term_freq = min_term_freq;
			this.Add("min_term_freq", this._min_term_freq);
			return this;
		}
		
		
		internal int _min_word_length { get; set; }
		///<summary>The minimum length of the word: shorter words will be ignored</summary>
		public MoreLikeThisQueryString MinWordLength(int min_word_length)
		{
			this._min_word_length = min_word_length;
			this.Add("min_word_length", this._min_word_length);
			return this;
		}
		
		
		internal IEnumerable<object> _mlt_fields { get; set; }
		///<summary>Specific fields to perform the query against</summary>
		public MoreLikeThisQueryString MltFields(params string[] mlt_fields)
		{
			this._mlt_fields = mlt_fields.Select(f=>(object)f);
			this.Add("mlt_fields", this._mlt_fields);
			return this;
		}
		
		
		internal double _percent_terms_to_match { get; set; }
		///<summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
		public MoreLikeThisQueryString PercentTermsToMatch(double percent_terms_to_match)
		{
			this._percent_terms_to_match = percent_terms_to_match;
			this.Add("percent_terms_to_match", this._percent_terms_to_match);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public MoreLikeThisQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal int _search_from { get; set; }
		///<summary>The offset from which to return results</summary>
		public MoreLikeThisQueryString SearchFrom(int search_from)
		{
			this._search_from = search_from;
			this.Add("search_from", this._search_from);
			return this;
		}
		
		
		internal  string[] _search_indices { get; set; }
		///<summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
		public MoreLikeThisQueryString SearchIndices(params string[] search_indices)
		{
			this._search_indices = search_indices;
			this.Add("search_indices", this._search_indices);
			return this;
		}
		
		
		internal string _search_query_hint { get; set; }
		///<summary>The search query hint</summary>
		public MoreLikeThisQueryString SearchQueryHint(string search_query_hint)
		{
			this._search_query_hint = search_query_hint;
			this.Add("search_query_hint", this._search_query_hint);
			return this;
		}
		
		
		internal string _search_scroll { get; set; }
		///<summary>A scroll search request definition</summary>
		public MoreLikeThisQueryString SearchScroll(string search_scroll)
		{
			this._search_scroll = search_scroll;
			this.Add("search_scroll", this._search_scroll);
			return this;
		}
		
		
		internal int _search_size { get; set; }
		///<summary>The number of documents to return (default: 10)</summary>
		public MoreLikeThisQueryString SearchSize(int search_size)
		{
			this._search_size = search_size;
			this.Add("search_size", this._search_size);
			return this;
		}
		
		
		internal string _search_source { get; set; }
		///<summary>A specific search request definition (instead of using the request body)</summary>
		public MoreLikeThisQueryString SearchSource(string search_source)
		{
			this._search_source = search_source;
			this.Add("search_source", this._search_source);
			return this;
		}
		
		
		internal string _search_type { get; set; }
		///<summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
		public MoreLikeThisQueryString SearchType(string search_type)
		{
			this._search_type = search_type;
			this.Add("search_type", this._search_type);
			return this;
		}
		
		
		internal  string[] _search_types { get; set; }
		///<summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
		public MoreLikeThisQueryString SearchTypes(params string[] search_types)
		{
			this._search_types = search_types;
			this.Add("search_types", this._search_types);
			return this;
		}
		
		
		internal  string[] _stop_words { get; set; }
		///<summary>A list of stop words to be ignored</summary>
		public MoreLikeThisQueryString StopWords(params string[] stop_words)
		{
			this._stop_words = stop_words;
			this.Add("stop_words", this._stop_words);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for MpercolateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
	///</pre>
	///</summary>
	public class MpercolateQueryString : FluentQueryString<MpercolateQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public MpercolateQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public MpercolateQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public MpercolateQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for MsearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html
	///</pre>
	///</summary>
	public class MultiSearchQueryString : FluentQueryString<MultiSearchQueryString> 
	{
		
		internal SearchTypeOptions _search_type { get; set; }
		///<summary>Search operation type</summary>
		public MultiSearchQueryString SearchType(SearchTypeOptions search_type)
		{
			this._search_type = search_type;
			this.Add("search_type", this._search_type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for MtermvectorsGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html
	///</pre>
	///</summary>
	public class MtermvectorsQueryString : FluentQueryString<MtermvectorsQueryString> 
	{
		
		internal  string[] _ids { get; set; }
		///<summary>A comma-separated list of documents ids. You must define ids as parameter or set &quot;ids&quot; or &quot;docs&quot; in the request body</summary>
		public MtermvectorsQueryString Ids(params string[] ids)
		{
			this._ids = ids;
			this.Add("ids", this._ids);
			return this;
		}
		
		
		internal bool _term_statistics { get; set; }
		///<summary>Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString TermStatistics(bool term_statistics)
		{
			this._term_statistics = term_statistics;
			this.Add("term_statistics", this._term_statistics);
			return this;
		}
		
		
		internal bool _field_statistics { get; set; }
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString FieldStatistics(bool field_statistics)
		{
			this._field_statistics = field_statistics;
			this.Add("field_statistics", this._field_statistics);
			return this;
		}
		
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal bool _offsets { get; set; }
		///<summary>Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString Offsets(bool offsets)
		{
			this._offsets = offsets;
			this.Add("offsets", this._offsets);
			return this;
		}
		
		
		internal bool _positions { get; set; }
		///<summary>Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString Positions(bool positions)
		{
			this._positions = positions;
			this.Add("positions", this._positions);
			return this;
		}
		
		
		internal bool _payloads { get; set; }
		///<summary>Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString Payloads(bool payloads)
		{
			this._payloads = payloads;
			this.Add("payloads", this._payloads);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _parent { get; set; }
		///<summary>Parent id of documents. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MtermvectorsQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for NodesHotThreadsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html
	///</pre>
	///</summary>
	public class NodesHotThreadsQueryString : FluentQueryString<NodesHotThreadsQueryString> 
	{
		
		internal string _interval { get; set; }
		///<summary>The interval for the second sampling of threads</summary>
		public NodesHotThreadsQueryString Interval(string interval)
		{
			this._interval = interval;
			this.Add("interval", this._interval);
			return this;
		}
		
		
		internal int _snapshots { get; set; }
		///<summary>Number of samples of thread stacktrace (default: 10)</summary>
		public NodesHotThreadsQueryString Snapshots(int snapshots)
		{
			this._snapshots = snapshots;
			this.Add("snapshots", this._snapshots);
			return this;
		}
		
		
		internal int _threads { get; set; }
		///<summary>Specify the number of threads to provide information for (default: 3)</summary>
		public NodesHotThreadsQueryString Threads(int threads)
		{
			this._threads = threads;
			this.Add("threads", this._threads);
			return this;
		}
		
		
		internal TypeOptions _type { get; set; }
		///<summary>The type to sample (default: cpu)</summary>
		public NodesHotThreadsQueryString Type(TypeOptions type)
		{
			this._type = type;
			this.Add("type", this._type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for NodesInfoForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html
	///</pre>
	///</summary>
	public class NodesInfoQueryString : FluentQueryString<NodesInfoQueryString> 
	{
		
		internal bool _flat_settings { get; set; }
		///<summary>Return settings in flat format (default: false)</summary>
		public NodesInfoQueryString FlatSettings(bool flat_settings)
		{
			this._flat_settings = flat_settings;
			this.Add("flat_settings", this._flat_settings);
			return this;
		}
		
		
		internal bool _human { get; set; }
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public NodesInfoQueryString Human(bool human)
		{
			this._human = human;
			this.Add("human", this._human);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for NodesShutdownForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html
	///</pre>
	///</summary>
	public class NodesShutdownQueryString : FluentQueryString<NodesShutdownQueryString> 
	{
		
		internal string _delay { get; set; }
		///<summary>Set the delay for the operation (default: 1s)</summary>
		public NodesShutdownQueryString Delay(string delay)
		{
			this._delay = delay;
			this.Add("delay", this._delay);
			return this;
		}
		
		
		internal bool _exit { get; set; }
		///<summary>Exit the JVM as well (default: true)</summary>
		public NodesShutdownQueryString Exit(bool exit)
		{
			this._exit = exit;
			this.Add("exit", this._exit);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for NodesStatsForAll
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html
	///</pre>
	///</summary>
	public class NodesStatsQueryString : FluentQueryString<NodesStatsQueryString> 
	{
		
		internal IEnumerable<object> _completion_fields { get; set; }
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public NodesStatsQueryString CompletionFields(params string[] completion_fields)
		{
			this._completion_fields = completion_fields.Select(f=>(object)f);
			this.Add("completion_fields", this._completion_fields);
			return this;
		}
		
		
		internal IEnumerable<object> _fielddata_fields { get; set; }
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public NodesStatsQueryString FielddataFields(params string[] fielddata_fields)
		{
			this._fielddata_fields = fielddata_fields.Select(f=>(object)f);
			this.Add("fielddata_fields", this._fielddata_fields);
			return this;
		}
		
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public NodesStatsQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal bool _groups { get; set; }
		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public NodesStatsQueryString Groups(bool groups)
		{
			this._groups = groups;
			this.Add("groups", this._groups);
			return this;
		}
		
		
		internal bool _human { get; set; }
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public NodesStatsQueryString Human(bool human)
		{
			this._human = human;
			this.Add("human", this._human);
			return this;
		}
		
		
		internal LevelOptions _level { get; set; }
		///<summary>Return indices stats aggregated at node, index or shard level</summary>
		public NodesStatsQueryString Level(LevelOptions level)
		{
			this._level = level;
			this.Add("level", this._level);
			return this;
		}
		
		
		internal  string[] _types { get; set; }
		///<summary>A comma-separated list of document types for the `indexing` index metric</summary>
		public NodesStatsQueryString Types(params string[] types)
		{
			this._types = types;
			this.Add("types", this._types);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for PercolateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html
	///</pre>
	///</summary>
	public class PercolateQueryString : FluentQueryString<PercolateQueryString> 
	{
		
		internal  string[] _routing { get; set; }
		///<summary>A comma-separated list of specific routing values</summary>
		public PercolateQueryString Routing(params string[] routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public PercolateQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public PercolateQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public PercolateQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public PercolateQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal string _percolate_index { get; set; }
		///<summary>The index to percolate the document into. Defaults to index.</summary>
		public PercolateQueryString PercolateIndex(string percolate_index)
		{
			this._percolate_index = percolate_index;
			this.Add("percolate_index", this._percolate_index);
			return this;
		}
		
		
		internal string _percolate_type { get; set; }
		///<summary>The type to percolate document into. Defaults to type.</summary>
		public PercolateQueryString PercolateType(string percolate_type)
		{
			this._percolate_type = percolate_type;
			this.Add("percolate_type", this._percolate_type);
			return this;
		}
		
		
		internal int _version { get; set; }
		///<summary>Explicit version number for concurrency control</summary>
		public PercolateQueryString Version(int version)
		{
			this._version = version;
			this.Add("version", this._version);
			return this;
		}
		
		
		internal VersionTypeOptions _version_type { get; set; }
		///<summary>Specific version type</summary>
		public PercolateQueryString VersionType(VersionTypeOptions version_type)
		{
			this._version_type = version_type;
			this.Add("version_type", this._version_type);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Ping
	///<pre>
	///http://www.elasticsearch.org/guide/
	///</pre>
	///</summary>
	public class PingQueryString : FluentQueryString<PingQueryString> 
	{
	}
	
	
	///<summary>Query string descriptor for ScrollGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html
	///</pre>
	///</summary>
	public class ScrollQueryString : FluentQueryString<ScrollQueryString> 
	{
		
		internal string _scroll { get; set; }
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public ScrollQueryString Scroll(string scroll)
		{
			this._scroll = scroll;
			this.Add("scroll", this._scroll);
			return this;
		}
		
		
		internal string _scroll_id { get; set; }
		///<summary>The scroll ID for scrolled search</summary>
		public ScrollQueryString ScrollId(string scroll_id)
		{
			this._scroll_id = scroll_id;
			this.Add("scroll_id", this._scroll_id);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
	///</pre>
	///</summary>
	public class SearchQueryString : FluentQueryString<SearchQueryString> 
	{
		
		internal string _analyzer { get; set; }
		///<summary>The analyzer to use for the query string</summary>
		public SearchQueryString Analyzer(string analyzer)
		{
			this._analyzer = analyzer;
			this.Add("analyzer", this._analyzer);
			return this;
		}
		
		
		internal bool _analyze_wildcard { get; set; }
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public SearchQueryString AnalyzeWildcard(bool analyze_wildcard)
		{
			this._analyze_wildcard = analyze_wildcard;
			this.Add("analyze_wildcard", this._analyze_wildcard);
			return this;
		}
		
		
		internal DefaultOperatorOptions _default_operator { get; set; }
		///<summary>The default operator for query string query (AND or OR)</summary>
		public SearchQueryString DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this._default_operator = default_operator;
			this.Add("default_operator", this._default_operator);
			return this;
		}
		
		
		internal string _df { get; set; }
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public SearchQueryString Df(string df)
		{
			this._df = df;
			this.Add("df", this._df);
			return this;
		}
		
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SearchQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SearchQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SearchQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal  string[] _indices_boost { get; set; }
		///<summary>Comma-separated list of index boosts</summary>
		public SearchQueryString IndicesBoost(params string[] indices_boost)
		{
			this._indices_boost = indices_boost;
			this.Add("indices_boost", this._indices_boost);
			return this;
		}
		
		
		internal bool _lenient { get; set; }
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public SearchQueryString Lenient(bool lenient)
		{
			this._lenient = lenient;
			this.Add("lenient", this._lenient);
			return this;
		}
		
		
		internal bool _lowercase_expanded_terms { get; set; }
		///<summary>Specify whether query terms should be lowercased</summary>
		public SearchQueryString LowercaseExpandedTerms(bool lowercase_expanded_terms)
		{
			this._lowercase_expanded_terms = lowercase_expanded_terms;
			this.Add("lowercase_expanded_terms", this._lowercase_expanded_terms);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal  string[] _routing { get; set; }
		///<summary>A comma-separated list of specific routing values</summary>
		public SearchQueryString Routing(params string[] routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _scroll { get; set; }
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public SearchQueryString Scroll(string scroll)
		{
			this._scroll = scroll;
			this.Add("scroll", this._scroll);
			return this;
		}
		
		
		internal SearchTypeOptions _search_type { get; set; }
		///<summary>Search operation type</summary>
		public SearchQueryString SearchType(SearchTypeOptions search_type)
		{
			this._search_type = search_type;
			this.Add("search_type", this._search_type);
			return this;
		}
		
		
		internal string _source { get; set; }
		///<summary>The URL-encoded request definition using the Query DSL (instead of using request body)</summary>
		public SearchQueryString Source(string source)
		{
			this._source = source;
			this.Add("source", this._source);
			return this;
		}
		
		
		internal  string[] _stats { get; set; }
		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public SearchQueryString Stats(params string[] stats)
		{
			this._stats = stats;
			this.Add("stats", this._stats);
			return this;
		}
		
		
		internal object _suggest_field { get; set; }
		///<summary>Specify which field to use for suggestions</summary>
		public SearchQueryString SuggestField(string suggest_field)
		{
			this._suggest_field = suggest_field;
			this.Add("suggest_field", this._suggest_field);
			return this;
		}
		
		
		internal SuggestModeOptions _suggest_mode { get; set; }
		///<summary>Specify suggest mode</summary>
		public SearchQueryString SuggestMode(SuggestModeOptions suggest_mode)
		{
			this._suggest_mode = suggest_mode;
			this.Add("suggest_mode", this._suggest_mode);
			return this;
		}
		
		
		internal int _suggest_size { get; set; }
		///<summary>How many suggestions to return in response</summary>
		public SearchQueryString SuggestSize(int suggest_size)
		{
			this._suggest_size = suggest_size;
			this.Add("suggest_size", this._suggest_size);
			return this;
		}
		
		
		internal string _suggest_text { get; set; }
		///<summary>The source text for which the suggestions should be returned</summary>
		public SearchQueryString SuggestText(string suggest_text)
		{
			this._suggest_text = suggest_text;
			this.Add("suggest_text", this._suggest_text);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SnapshotCreate
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public class SnapshotCreateQueryString : FluentQueryString<SnapshotCreateQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotCreateQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _wait_for_completion { get; set; }
		///<summary>Should this request wait until the operation has completed before returning</summary>
		public SnapshotCreateQueryString WaitForCompletion(bool wait_for_completion)
		{
			this._wait_for_completion = wait_for_completion;
			this.Add("wait_for_completion", this._wait_for_completion);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SnapshotCreateRepository
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public class SnapshotCreateRepositoryQueryString : FluentQueryString<SnapshotCreateRepositoryQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotCreateRepositoryQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public SnapshotCreateRepositoryQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SnapshotDelete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public class SnapshotDeleteQueryString : FluentQueryString<SnapshotDeleteQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotDeleteQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SnapshotDeleteRepository
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public class SnapshotDeleteRepositoryQueryString : FluentQueryString<SnapshotDeleteRepositoryQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotDeleteRepositoryQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public SnapshotDeleteRepositoryQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SnapshotGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public class SnapshotGetQueryString : FluentQueryString<SnapshotGetQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotGetQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SnapshotGetRepository
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public class SnapshotGetRepositoryQueryString : FluentQueryString<SnapshotGetRepositoryQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotGetRepositoryQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _local { get; set; }
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public SnapshotGetRepositoryQueryString Local(bool local)
		{
			this._local = local;
			this.Add("local", this._local);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for SnapshotRestore
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html
	///</pre>
	///</summary>
	public class SnapshotRestoreQueryString : FluentQueryString<SnapshotRestoreQueryString> 
	{
		
		internal string _master_timeout { get; set; }
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotRestoreQueryString MasterTimeout(string master_timeout)
		{
			this._master_timeout = master_timeout;
			this.Add("master_timeout", this._master_timeout);
			return this;
		}
		
		
		internal bool _wait_for_completion { get; set; }
		///<summary>Should this request wait until the operation has completed before returning</summary>
		public SnapshotRestoreQueryString WaitForCompletion(bool wait_for_completion)
		{
			this._wait_for_completion = wait_for_completion;
			this.Add("wait_for_completion", this._wait_for_completion);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Suggest
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html
	///</pre>
	///</summary>
	public class SuggestQueryString : FluentQueryString<SuggestQueryString> 
	{
		
		internal bool _ignore_unavailable { get; set; }
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SuggestQueryString IgnoreUnavailable(bool ignore_unavailable)
		{
			this._ignore_unavailable = ignore_unavailable;
			this.Add("ignore_unavailable", this._ignore_unavailable);
			return this;
		}
		
		
		internal bool _allow_no_indices { get; set; }
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SuggestQueryString AllowNoIndices(bool allow_no_indices)
		{
			this._allow_no_indices = allow_no_indices;
			this.Add("allow_no_indices", this._allow_no_indices);
			return this;
		}
		
		
		internal ExpandWildcardsOptions _expand_wildcards { get; set; }
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SuggestQueryString ExpandWildcards(ExpandWildcardsOptions expand_wildcards)
		{
			this._expand_wildcards = expand_wildcards;
			this.Add("expand_wildcards", this._expand_wildcards);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SuggestQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public SuggestQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _source { get; set; }
		///<summary>The URL-encoded request definition (instead of using request body)</summary>
		public SuggestQueryString Source(string source)
		{
			this._source = source;
			this.Add("source", this._source);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for TermvectorGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html
	///</pre>
	///</summary>
	public class TermvectorQueryString : FluentQueryString<TermvectorQueryString> 
	{
		
		internal bool _term_statistics { get; set; }
		///<summary>Specifies if total term frequency and document frequency should be returned.</summary>
		public TermvectorQueryString TermStatistics(bool term_statistics)
		{
			this._term_statistics = term_statistics;
			this.Add("term_statistics", this._term_statistics);
			return this;
		}
		
		
		internal bool _field_statistics { get; set; }
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
		public TermvectorQueryString FieldStatistics(bool field_statistics)
		{
			this._field_statistics = field_statistics;
			this.Add("field_statistics", this._field_statistics);
			return this;
		}
		
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields to return.</summary>
		public TermvectorQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal bool _offsets { get; set; }
		///<summary>Specifies if term offsets should be returned.</summary>
		public TermvectorQueryString Offsets(bool offsets)
		{
			this._offsets = offsets;
			this.Add("offsets", this._offsets);
			return this;
		}
		
		
		internal bool _positions { get; set; }
		///<summary>Specifies if term positions should be returned.</summary>
		public TermvectorQueryString Positions(bool positions)
		{
			this._positions = positions;
			this.Add("positions", this._positions);
			return this;
		}
		
		
		internal bool _payloads { get; set; }
		///<summary>Specifies if term payloads should be returned.</summary>
		public TermvectorQueryString Payloads(bool payloads)
		{
			this._payloads = payloads;
			this.Add("payloads", this._payloads);
			return this;
		}
		
		
		internal string _preference { get; set; }
		///<summary>Specify the node or shard the operation should be performed on (default: random).</summary>
		public TermvectorQueryString Preference(string preference)
		{
			this._preference = preference;
			this.Add("preference", this._preference);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value.</summary>
		public TermvectorQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _parent { get; set; }
		///<summary>Parent id of documents.</summary>
		public TermvectorQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
	}
	
	
	///<summary>Query string descriptor for Update
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html
	///</pre>
	///</summary>
	public class UpdateQueryString : FluentQueryString<UpdateQueryString> 
	{
		
		internal ConsistencyOptions _consistency { get; set; }
		///<summary>Explicit write consistency setting for the operation</summary>
		public UpdateQueryString Consistency(ConsistencyOptions consistency)
		{
			this._consistency = consistency;
			this.Add("consistency", this._consistency);
			return this;
		}
		
		
		internal IEnumerable<object> _fields { get; set; }
		///<summary>A comma-separated list of fields to return in the response</summary>
		public UpdateQueryString Fields(params string[] fields)
		{
			this._fields = fields.Select(f=>(object)f);
			this.Add("fields", this._fields);
			return this;
		}
		
		
		internal string _lang { get; set; }
		///<summary>The script language (default: mvel)</summary>
		public UpdateQueryString Lang(string lang)
		{
			this._lang = lang;
			this.Add("lang", this._lang);
			return this;
		}
		
		
		internal string _parent { get; set; }
		///<summary>ID of the parent document</summary>
		public UpdateQueryString Parent(string parent)
		{
			this._parent = parent;
			this.Add("parent", this._parent);
			return this;
		}
		
		
		internal bool _refresh { get; set; }
		///<summary>Refresh the index after performing the operation</summary>
		public UpdateQueryString Refresh(bool refresh)
		{
			this._refresh = refresh;
			this.Add("refresh", this._refresh);
			return this;
		}
		
		
		internal ReplicationOptions _replication { get; set; }
		///<summary>Specific replication type</summary>
		public UpdateQueryString Replication(ReplicationOptions replication)
		{
			this._replication = replication;
			this.Add("replication", this._replication);
			return this;
		}
		
		
		internal int _retry_on_conflict { get; set; }
		///<summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
		public UpdateQueryString RetryOnConflict(int retry_on_conflict)
		{
			this._retry_on_conflict = retry_on_conflict;
			this.Add("retry_on_conflict", this._retry_on_conflict);
			return this;
		}
		
		
		internal string _routing { get; set; }
		///<summary>Specific routing value</summary>
		public UpdateQueryString Routing(string routing)
		{
			this._routing = routing;
			this.Add("routing", this._routing);
			return this;
		}
		
		
		internal string _script { get; set; }
		///<summary>The URL-encoded script definition (instead of using request body)</summary>
		public UpdateQueryString Script(string script)
		{
			this._script = script;
			this.Add("script", this._script);
			return this;
		}
		
		
		internal string _timeout { get; set; }
		///<summary>Explicit operation timeout</summary>
		public UpdateQueryString Timeout(string timeout)
		{
			this._timeout = timeout;
			this.Add("timeout", this._timeout);
			return this;
		}
		
		
		internal string _timestamp { get; set; }
		///<summary>Explicit timestamp for the document</summary>
		public UpdateQueryString Timestamp(string timestamp)
		{
			this._timestamp = timestamp;
			this.Add("timestamp", this._timestamp);
			return this;
		}
		
		
		internal string _ttl { get; set; }
		///<summary>Expiration time for the document</summary>
		public UpdateQueryString Ttl(string ttl)
		{
			this._ttl = ttl;
			this.Add("ttl", this._ttl);
			return this;
		}
		
		
		internal int _version { get; set; }
		///<summary>Explicit version number for concurrency control</summary>
		public UpdateQueryString Version(int version)
		{
			this._version = version;
			this.Add("version", this._version);
			return this;
		}
		
		
		internal VersionTypeOptions _version_type { get; set; }
		///<summary>Specific version type</summary>
		public UpdateQueryString VersionType(VersionTypeOptions version_type)
		{
			this._version_type = version_type;
			this.Add("version_type", this._version_type);
			return this;
		}
		
	}
	
	
}
 