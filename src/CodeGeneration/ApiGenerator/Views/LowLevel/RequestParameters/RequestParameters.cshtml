@using RazorLight
@using System.Collections.Generic
@using System.Collections.ObjectModel
@using ApiGenerator.Domain
@using ApiGenerator
@using ApiGenerator.Domain.Code
@using ApiGenerator.Domain.Specification
@inherits CodeTemplatePage<KeyValuePair<string, ReadOnlyCollection<ApiEndpoint>>>
@{ IncludeAsync("GeneratorNotice.cshtml", Model); }
@{
	KeyValuePair<string, ReadOnlyCollection<ApiEndpoint>> model = Model;
	string ns = model.Key != CsharpNames.RootNamespace ? "."+CsharpNames.ApiNamespace+"." + model.Key + CsharpNames.ApiNamespaceSuffix : null;
	var endpoints = model.Value;
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;

// ReSharper disable once CheckNamespace
namespace Elasticsearch.Net@(ns)
{
	@foreach (var endpoint in endpoints)
	{
		var r = endpoint.RequestParameterImplementation;
		var names = r.CsharpNames;
<text>
	///<summary>Request options for @names.MethodName<pre>@r.OfficialDocumentationLink</pre></summary>
	public class @names.ParametersName : RequestParameters<@names.ParametersName> 
	{
		public override HttpMethod DefaultHttpMethod => HttpMethod.@r.HttpMethod;
		@foreach (var param in r.Params)
		{
<text>		@Raw(param.InitializerGenerator(param.TypeLowLevel, param.ClsName, param.QueryStringKey, param.SetterLowLevel, param.Description))
</text>
		}
	}</text>
	}
}