@using System.Collections.Generic
@using System.Linq
@using CsQuery.ExtensionMethods.Internal
@using ApiGenerator.Domain
@using ApiGenerator
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;

//This file lays the base for all the descriptors based on the query string parameters in the spec for IElasticClient.
//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/master/rest-api-spec

namespace Nest
{
	public abstract partial class @Raw("RequestDescriptorBase<TDescriptor, TParameters, TInterface>")
	{
	@foreach (var common in RestApiSpec.CommonApiQueryParameters.Values)
	{
		var original = common.OriginalQueryStringParamName;
		var t = @common.CsharpHighLevelType;
		var tSuffix = (t == "bool" || t == "bool?") ? " = true" : "";
		<text>		public TDescriptor @(common.CsharpName)(@common.CsharpHighLevelType @original@tSuffix) => Qs("@original", @(original));</text>
	}
	}
	@foreach (CsharpMethod method in Model.CsharpMethodsWithQueryStringInfo)
	{
		var type = method.DescriptorType + method.DescriptorTypeGeneric;
	<text>
	///<summary>descriptor for @method.FullName <pre>@method.Documentation</pre></summary>
	public partial class @Raw(type) @(Raw(string.Format(" : RequestDescriptorBase<{0},{1}, {2}>, {2}", type, method.QueryStringParamName, method.InterfaceType)))
	{ 
	@foreach (ApiUrlPart part in method.AllParts.Where(p=>!ApiUrl.BlackListRouteValues.Contains(p.Name)))
	{
	<text>	@(Raw(part.ClrTypeName)) @(Raw(method.InterfaceType)).@(part.InterfaceName) => Self.RouteValues.Get@(Raw(string.Format("<{0}>",part.ClrTypeName)))("@(part.Name)");</text>
	}
	@foreach (Constructor c in method.DescriptorConstructors())
    {
	<text>@(Raw(c.Description))
		@(Raw(c.Generated))
		@(Raw(c.Body.IsNullOrEmpty() ? "{}" : c.Body))
		@(Raw(c.AdditionalCode))
</text>
    }
	@foreach (FluentRouteSetter c in method.GetFluentRouteSetters())
    {
	<text>	@(Raw(c.XmlDoc))
		@(Raw(c.Code))
</text>
    }
	</text>foreach (KeyValuePair<string, ApiQueryParameters> kv in method.Url.Params)
	{
		//skip parameters already part of the path portion of the url
        if (method.Url.Parts != null && method.Url.Parts.ContainsKey(kv.Key))
        {
			continue;
        }
		//we prefer this parameter to be explictly implemented on the request body
		if (kv.Value.RenderPartial && (method.HttpMethod != "GET" && method.HttpMethod != "HEAD"))
        {
			continue;
        }
		var t = @kv.Value.HighLevelType(kv.Key);
		var tMethod = t == "Time" ? ".ToTimeSpan()" : "";
		var tSuffix = (t == "bool" || t == "bool?") ? " = true" : "";
		var m = kv.Key.ToPascalCase();
		var mm = (m != "Type" && m != "Index" && m != "Source" && m != "Script") ? m : m + "QueryString";
		var typed = !method.DescriptorTypeGeneric.IsNullOrEmpty();
		var g = typed ? method.DescriptorTypeGeneric.Replace("<", "").Replace(">", "") : "T";
		var mml = mm.ToLowerInvariant();
		var fieldsMethod = (mml.Contains("fields") || mml.Contains("sourceinclude") || mml.Contains("sourceexclude") ) && t.Contains("Fields");
		var desc = kv.Value.HighLevelTypeDescription(kv.Key).ToList();
		var original = kv.Value.OriginalQueryStringParamName;
		<text>@if (desc.Count == 1) {
		<text>///<summary>@Raw(desc.First())</summary></text>
		}
		else 
		{ <text>		///<summary>
		@Raw(string.Join("\r\n\t\t", desc.Select(d=> "/// " + d)))
		///</summary></text>
		}</text><text>@if(!string.IsNullOrWhiteSpace(kv.Value.Obsolete))
		{<text>		[Obsolete("Scheduled to be removed in 7.0, @kv.Value.Obsolete")]
</text>}
		public @Raw(type) @(mm)(@t @kv.Key@tSuffix) => Qs("@original", @(kv.Key));</text>
		if (fieldsMethod)
		{
		<text>///<summary>@kv.Value.Description</summary>
		public @Raw(type) @mm@(Raw(typed ? "" : "<T>"))(params @Raw("Expression<Func<" + g + ", object>>[]") fields) @Raw(typed ? "" : "where "+ g + " : class") => Qs("@original", fields?@Raw(".Select(e=>(Field)e)"));</text>
		}
		else if (mm.ToLowerInvariant().Contains("field") && t.Contains("Field"))
		{<text>
		///<summary>@kv.Value.Description</summary>
		public @Raw(type) @mm@(Raw(typed ? "" : "<T>"))(@Raw("Expression<Func<"+ g +", object>>") field) @Raw(typed ? "" : "where " + g + " : class") => Qs("@original", (Field)field);</text>
		}
	}
	if (method.Unmapped)
	{<text>
		//TODO THIS METHOD IS UNMAPPED!
		</text>
	}	
	<text>
	}</text>
	}
}