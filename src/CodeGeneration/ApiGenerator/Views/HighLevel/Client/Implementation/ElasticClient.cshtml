@using RazorLight
@using System
@using System.Collections.Generic
@using System.Globalization
@using System.Linq
@using System.Text.RegularExpressions
@using System.Threading.Tasks
@using ApiGenerator.Domain
@using ApiGenerator 
@using ApiGenerator.Domain.Code
@using CsQuery.StringScanner.Implementation
@inherits CodeTemplatePage<RestApiSpec>
@{ IncludeAsync("GeneratorNotice.cshtml", Model); }
using System;
using System.Threading;
using System.Threading.Tasks;
using Nest;
@{ IncludeAsync("HighLevel/Client/Usings.cshtml", Model);}

@{
	RestApiSpec model = Model;
	var namespaces = model.EndpointsPerNamespace.Keys.Where(k => k != CsharpNames.RootNamespace);
<text>
namespace Nest
{
	///<summary>
	///Raw operations with elasticsearch
	///</summary>
	public partial class ElasticClient : IElasticClient
	{
</text>
	foreach (var ns in namespaces)
	{
<text>		///<summary> This property logically groups all <c>@ns</c> API's together.</summary>
			public @CsharpNames.HighLevelClientNamespacePrefix@(ns)@CsharpNames.ClientNamespaceSuffix @ns { get; private set; }
</text>
	}
<text>
		partial void SetupNamespaces()
		{
</text>
	foreach (var ns in namespaces)
	{
<text>		@ns = new @(CsharpNames.HighLevelClientNamespacePrefix)@(ns)@(CsharpNames.ClientNamespaceSuffix)(this);
</text>
	}
<text>
		}
</text>
	

	foreach (var kv in model.EndpointsPerNamespace)
	{
		if (kv.Key != CsharpNames.RootNamespace)
		{
			continue;
		}
		var endpoints = kv.Value;
		var models = endpoints.Select(e=>e.HighLevelModel).ToList();
		foreach (var m in models)
		{
			IncludeAsync("HighLevel/Client/Implementation/MethodImplementation.cshtml", m);
		}
	}
	<text>
	}
	}
	</text>
}
