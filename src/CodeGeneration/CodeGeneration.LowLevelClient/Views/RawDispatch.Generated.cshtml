@using System.Linq
@using CodeGeneration.LowLevelClient.Domain
@using CodeGeneration.LowLevelClient
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Elasticsearch.Net;
using Shared.Extensions;

///Generated File Please Do Not Edit Manually
@{ RestApiSpec model = Model; }

namespace Nest
{
	///<summary>
	///Raw operations with elasticsearch
	///</summary>
	internal partial class RawDispatch
	{
	
	@foreach (var kv in model.Endpoints)
	{
		var endpoint = kv.Value;
		var peek = endpoint.GetCsharpMethods().FirstOrDefault();
		if (peek == null)
		{
			<text>//NO METHOD FOR @endpoint.Url.Path</text>
			continue;
		}
		var generate = new [] {
			new { Name = endpoint.CsharpMethodName + "Dispatch<T>", Returns = "ElasticsearchResponse<T>" , Async = false},
			new { Name = endpoint.CsharpMethodName + "DispatchAsync<T>", Returns = "Task<ElasticsearchResponse<T>>", Async = true },
		};
		foreach(var gen in generate)
		{
		<text>
		internal @Raw(gen.Returns) @(Raw(gen.Name))(ElasticsearchPathInfo<@peek.QueryStringParamName> pathInfo @if (endpoint.Body != null) {<text>, object body</text>})
		{
			switch(pathInfo.HttpMethod)
			{
			@foreach (var methodGroup in endpoint.RawDispatches)
			{
				var httpMethod = methodGroup.Key;
				var dispatches = methodGroup.Value.ToList();
				var totalDispatches = dispatches.Count();
				var allWithIfChecks = dispatches.All(d => d.IfChecks.Any());
				var i = 0;
				<text>case PathInfoHttpMethod.@httpMethod.ToUpper():
				@foreach (var dispatch in dispatches)
				{
					var method = dispatch.CsharpMethod;
					var name = method.FullName + ((gen.Async) ? "Async<T>" : "<T>");
					<text>//@method.HttpMethod @method.Path</text>
					if (i == 0 && !dispatch.IfChecks.Any())
					{
					<text>return this.Raw.@(Raw(name))(@Raw(string.Join(",", dispatch.MethodArguments)));</text>
					}
					else
					{
						if (dispatch.IfChecks.Any())
						{
					<text>if (@Raw(string.Join(" && ", dispatch.IfChecks)))
						return this.Raw.@(Raw(name))(@Raw(string.Join(",", dispatch.MethodArguments)));</text>
						}
						else
						{
					<text>return this.Raw.@(Raw(name))(@Raw(string.Join(",", dispatch.MethodArguments)));</text>
						}
					}
					if (i == totalDispatches - 1 && allWithIfChecks)
					{
					<text>break;</text>
					}
				i++;
				}</text>
			}
			}
			throw new DispatchException("Could not dispatch IElasticClient.@(endpoint.CsharpMethodName)() into any of the following paths: \r\n - @string.Join("\\r\\n - ", endpoint.Url.Paths)");
		}
		</text>
	} 
	}
	}	
}
