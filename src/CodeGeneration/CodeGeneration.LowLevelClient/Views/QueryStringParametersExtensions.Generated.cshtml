@using System.Collections.Generic
@using System.Linq
@using CodeGeneration.LowLevelClient.Domain
@using CodeGeneration.LowLevelClient
@using CsQuery.Engine.PseudoClassSelectors

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;
using Nest.Resolvers;

///This file contains all the typed querystring parameters that are generated of the client spec.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit @Model.Commit

namespace Nest
{
	public static class QueryStringPameterExtensions
	{
	@foreach (CsharpMethod method in Model.CsharpMethodsWithQueryStringInfo)
	{
		if (!method.Url.Params.Any(p => p.Key.Contains("field") || p.Key.Contains("source_")))
		{
			continue;
		}
		foreach (KeyValuePair<string, ApiQueryParameters> kv in method.Url.Params)
	  {
		  var mm = kv.Key;
		  var fieldType = kv.Value.CsharpType(kv.Key).Replace("params", "");
		  var setter = mm;
			var isFields = (mm.Contains("fields") || mm.Contains("source_include") || mm.Contains("source_exclude"));
		  if (isFields && fieldType.Contains("string"))
		  {
			  fieldType = "IEnumerable<PropertyPathMarker>";
			  setter = mm + ".Select(f=>(PropertyPathMarker)f)";
		  }
		  else if (mm.Contains("field") && fieldType.Contains("string"))
		  {
			  fieldType = "PropertyPathMarker";
		  }
		if (isFields && fieldType.Contains("PropertyPath"))
		 {
		<text>
		///<summary>@kv.Value.Description</summary>
			internal static @method.QueryStringParamName _@(mm.ToPascalCase())@(Raw("<T>"))(
				this @method.QueryStringParamName qs,
				@Raw("IEnumerable<Expression<Func<T, object>>> ") @mm)
			where T : class
		{
			qs._@(mm) = @mm@Raw(".Select(e=>(PropertyPathMarker)e)");
			qs.Add("@mm", qs._@mm);
			return qs;
		}
		</text>
		 }
		 else if (mm.Contains("field") && fieldType.Contains("PropertyPath"))
		 {
		<text>
		///<summary>@kv.Value.Description</summary>
			internal static @method.QueryStringParamName _@(mm.ToPascalCase())@(Raw("<T>"))(
				this @method.QueryStringParamName qs,
				@Raw("Expression<Func<T, object>>") @mm)
			where T : class
		{
			var p = (PropertyPathMarker)@mm;
			qs._@(mm) = p;
			qs.Add("@mm", qs._@mm);
			return qs;
		}
		</text>
		 }
			

	  }
	}
}
}
 