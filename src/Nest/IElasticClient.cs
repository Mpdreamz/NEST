using System;
namespace Nest
{
	public interface IElasticClient
	{
		IndicesOperationResponse Alias(AliasParams aliasParams);
		IndicesOperationResponse Alias(System.Collections.Generic.IEnumerable<AliasParams> aliases);
		IndicesOperationResponse Alias(System.Collections.Generic.IEnumerable<string> aliases);
		IndicesOperationResponse Alias(System.Collections.Generic.IEnumerable<string> indices, string alias);
		IndicesOperationResponse Alias(string alias);
		IndicesOperationResponse Alias(string index, System.Collections.Generic.IEnumerable<string> aliases);
		IndicesOperationResponse Alias(string index, string alias);
		AnalyzeResponse Analyze(AnalyzeParams analyzeParams, string text);
		AnalyzeResponse Analyze(string text);
		AnalyzeResponse Analyze<T>(System.Linq.Expressions.Expression<Func<T, object>> selector, string index, string text) where T : class;
		AnalyzeResponse Analyze<T>(System.Linq.Expressions.Expression<Func<T, object>> selector, string text) where T : class;
		IndicesResponse ClearCache();
		IndicesResponse ClearCache(ClearCacheOptions options);
		IndicesResponse ClearCache(System.Collections.Generic.List<string> indices, ClearCacheOptions options);
		IndicesResponse ClearCache<T>() where T : class;
		IndicesResponse ClearCache<T>(ClearCacheOptions options) where T : class;
		IndicesOperationResponse CloseIndex(string index);
		IndicesOperationResponse CloseIndex<T>() where T : class;
		CountResponse Count(Action<QueryDescriptor> querySelector);
		CountResponse Count(System.Collections.Generic.IEnumerable<string> indices, Action<QueryDescriptor> querySelector);
		CountResponse Count(System.Collections.Generic.IEnumerable<string> indices, System.Collections.Generic.IEnumerable<string> types, Action<QueryDescriptor> querySelector);
		CountResponse Count<T>(Action<QueryDescriptor<T>> querySelector) where T : class;
		CountResponse Count<T>(System.Collections.Generic.IEnumerable<string> indices, Action<QueryDescriptor<T>> querySelector) where T : class;
		CountResponse Count<T>(System.Collections.Generic.IEnumerable<string> indices, System.Collections.Generic.IEnumerable<string> types, Action<QueryDescriptor<T>> querySelector) where T : class;
		CountResponse CountAll(Action<QueryDescriptor> querySelector);
		CountResponse CountAll(string query);
		CountResponse CountAll<T>(Action<QueryDescriptor<T>> querySelector) where T : class;
		IndicesResponse CreateIndex(string index, IndexSettings settings);
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, string type) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, string type, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<T> objects) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<T> objects, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<T> objects, string index) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<T> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<T> objects, string index, string type) where T : class;
		ConnectionStatus Delete<T>(System.Collections.Generic.IEnumerable<T> objects, string index, string type, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus Delete<T>(T @object) where T : class;
		ConnectionStatus Delete<T>(T @object, DeleteParameters deleteParameters) where T : class;
		ConnectionStatus Delete<T>(T @object, string index) where T : class;
		ConnectionStatus Delete<T>(T @object, string index, DeleteParameters deleteParameters) where T : class;
		ConnectionStatus Delete<T>(T @object, string index, string type) where T : class;
		ConnectionStatus Delete<T>(T @object, string index, string type, DeleteParameters deleteParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, SimpleBulkParameters bulkParameters, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<T> objects) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<T> objects, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index, SimpleBulkParameters bulkParameters, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(T @object) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(T @object, DeleteParameters deleteParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(T @object, string index) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(T @object, string index, DeleteParameters deleteParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(T @object, string index, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteAsync<T>(T @object, string index, string type, DeleteParameters deleteParameters) where T : class;
		ConnectionStatus DeleteById(string index, string type, int id);
		ConnectionStatus DeleteById(string index, string type, int id, DeleteParameters deleteParameters);
		ConnectionStatus DeleteById(string index, string type, string id);
		ConnectionStatus DeleteById(string index, string type, string id, DeleteParameters deleteParameters);
		ConnectionStatus DeleteById<T>(int id) where T : class;
		ConnectionStatus DeleteById<T>(int id, DeleteParameters deleteParameters) where T : class;
		ConnectionStatus DeleteById<T>(string id) where T : class;
		ConnectionStatus DeleteById<T>(string id, DeleteParameters deleteParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync(string index, string type, int id);
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync(string index, string type, int id, DeleteParameters deleteParameters);
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync(string index, string type, string id);
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync(string index, string type, string id, DeleteParameters deleteParameters);
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync<T>(int id) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync<T>(int id, DeleteParameters deleteParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync<T>(string id) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByIdAsync<T>(string id, DeleteParameters deleteParameters) where T : class;
		ConnectionStatus DeleteByQuery(Action<QueryPathDescriptor> query, DeleteByQueryParameters parameters = null);
		ConnectionStatus DeleteByQuery(string query, DeleteByQueryParameters parameters = null);
		ConnectionStatus DeleteByQuery<T>(Action<QueryPathDescriptor<T>> query, DeleteByQueryParameters parameters = null) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByQueryAsync(Action<QueryPathDescriptor> query, DeleteByQueryParameters parameters = null);
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByQueryAsync(string query, DeleteByQueryParameters parameters = null);
		System.Threading.Tasks.Task<ConnectionStatus> DeleteByQueryAsync<T>(Action<QueryPathDescriptor<T>> query, DeleteByQueryParameters parameters = null) where T : class;
		IndicesResponse DeleteIndex(string index);
		IndicesResponse DeleteIndex<T>() where T : class;
		IndicesResponse DeleteMapping<T>() where T : class;
		IndicesResponse DeleteMapping<T>(string index) where T : class;
		IndicesResponse DeleteMapping<T>(string index, string type) where T : class;
		IndicesOperationResponse Flush(bool refresh = false);
		IndicesOperationResponse Flush(System.Collections.Generic.IEnumerable<string> indices, bool refresh = false);
		IndicesOperationResponse Flush(string index, bool refresh = false);
		IndicesOperationResponse Flush<T>(bool refresh = false) where T : class;
		System.Collections.Generic.IEnumerable<T> Get<T>(System.Collections.Generic.IEnumerable<int> ids) where T : class;
		System.Collections.Generic.IEnumerable<T> Get<T>(System.Collections.Generic.IEnumerable<string> ids) where T : class;
		T Get<T>(int id) where T : class;
		T Get<T>(string id) where T : class;
		System.Collections.Generic.IEnumerable<T> Get<T>(string index, string type, System.Collections.Generic.IEnumerable<int> ids) where T : class;
		System.Collections.Generic.IEnumerable<T> Get<T>(string index, string type, System.Collections.Generic.IEnumerable<string> ids) where T : class;
		T Get<T>(string index, string type, int id) where T : class;
		T Get<T>(string index, string type, string id) where T : class;
		IndexSettingsResponse GetIndexSettings();
		IndexSettingsResponse GetIndexSettings(string index);
		System.Collections.Generic.IEnumerable<string> GetIndicesPointingToAlias(string alias);
		TypeMapping GetMapping(string index, string type);
		TypeMapping GetMapping<T>() where T : class;
		TypeMapping GetMapping<T>(string index) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, string type) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, string type, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<T> objects) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<T> objects, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<T> objects, string index) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<T> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<T> objects, string index, string type) where T : class;
		ConnectionStatus IndexMany<T>(System.Collections.Generic.IEnumerable<T> objects, string index, string type, SimpleBulkParameters bulkParameters) where T : class;
		ConnectionStatus Index<T>(T @object) where T : class;
		ConnectionStatus Index<T>(T @object, IndexParameters indexParameters) where T : class;
		ConnectionStatus Index<T>(T @object, string index) where T : class;
		ConnectionStatus Index<T>(T @object, string index, IndexParameters indexParameters) where T : class;
		ConnectionStatus Index<T>(T @object, string index, string type) where T : class;
		ConnectionStatus Index<T>(T @object, string index = null, string type = null, IndexParameters indexParameters = null) where T : class;
		ConnectionStatus Index<T>(T @object, string index, string type, int id) where T : class;
		ConnectionStatus Index<T>(T @object, string index, string type, int id, IndexParameters indexParameters) where T : class;
		ConnectionStatus Index<T>(T @object, string index, string type, string id) where T : class;
		ConnectionStatus Index<T>(T @object, string index, string type, string id, IndexParameters indexParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<BulkParameters<T>> objects, string index, string type, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<T> objects) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<T> objects, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexManyAsync<T>(System.Collections.Generic.IEnumerable<T> objects, string index, string type, SimpleBulkParameters bulkParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, IndexParameters indexParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index, IndexParameters indexParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index, string type) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index, string type, IndexParameters indexParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index, string type, int id) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index, string type, int id, IndexParameters indexParameters) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index, string type, string id) where T : class;
		System.Threading.Tasks.Task<ConnectionStatus> IndexAsync<T>(T @object, string index, string type, string id, IndexParameters indexParameters) where T : class;
		IndexExistsResponse IndexExists(string index);
		bool IsValid { get; }
		IndicesResponse Map(TypeMapping typeMapping);
		IndicesResponse Map(TypeMapping typeMapping, string index);
		IndicesResponse Map<T>() where T : class;
		IndicesResponse Map<T>(string index) where T : class;
		IndicesResponse Map<T>(string index, string type) where T : class;
		IndicesOperationResponse OpenIndex(string index);
		IndicesOperationResponse OpenIndex<T>() where T : class;
		IndicesOperationResponse Optimize();
		IndicesOperationResponse Optimize(OptimizeParams optimizeParameters);
		IndicesOperationResponse Optimize(System.Collections.Generic.IEnumerable<string> indices);
		IndicesOperationResponse Optimize(System.Collections.Generic.IEnumerable<string> indices, OptimizeParams optimizeParameters);
		IndicesOperationResponse Optimize(string index);
		IndicesOperationResponse Optimize(string index, OptimizeParams optimizeParameters);
		IndicesOperationResponse Optimize<T>() where T : class;
		IndicesOperationResponse Optimize<T>(OptimizeParams optimizeParameters) where T : class;
		PercolateResponse Percolate<T>(string index, string type, T @object) where T : class;
		PercolateResponse Percolate<T>(string index, T @object) where T : class;
		PercolateResponse Percolate<T>(T @object) where T : class;
		IndicesShardResponse Refresh();
		IndicesShardResponse Refresh(System.Collections.Generic.IEnumerable<string> indices);
		IndicesShardResponse Refresh(string index);
		IndicesShardResponse Refresh<T>() where T : class;
		RegisterPercolateResponse RegisterPercolator(string index, string name, string query);
		RegisterPercolateResponse RegisterPercolator(string name, Action<QueryPathDescriptor<dynamic>> querySelector);
		RegisterPercolateResponse RegisterPercolator<T>(string name, Action<QueryPathDescriptor<T>> querySelector) where T : class;
		IndicesOperationResponse RemoveAlias(AliasParams aliasParams);
		IndicesOperationResponse RemoveAlias(System.Collections.Generic.IEnumerable<string> aliases);
		IndicesOperationResponse RemoveAlias(string alias);
		IndicesOperationResponse RemoveAlias(string index, System.Collections.Generic.IEnumerable<string> aliases);
		IndicesOperationResponse RemoveAlias(string index, string alias);
		IndicesOperationResponse RemoveAliases(System.Collections.Generic.IEnumerable<AliasParams> aliases);
		IndicesOperationResponse Rename(string index, string oldAlias, string newAlias);
		QueryResponse<dynamic> Search(Func<SearchDescriptor<dynamic>, SearchDescriptor<dynamic>> searcher);
		QueryResponse<T> Search<T>(Func<SearchDescriptor<T>, SearchDescriptor<T>> searcher) where T : class;
		QueryResponse<T> Search<T>(string query) where T : class;
		SegmentsResponse Segments();
		SegmentsResponse Segments(System.Collections.Generic.IEnumerable<string> indices);
		SegmentsResponse Segments(string index);
		string Serialize(object @object);
		IndicesShardResponse Snapshot();
		IndicesShardResponse Snapshot(System.Collections.Generic.IEnumerable<string> indices);
		IndicesShardResponse Snapshot(string index);
		IndicesShardResponse Snapshot<T>() where T : class;
		GlobalStatsResponse Stats();
		GlobalStatsResponse Stats(StatsParams parameters);
		StatsResponse Stats(System.Collections.Generic.IEnumerable<string> indices);
		StatsResponse Stats(System.Collections.Generic.IEnumerable<string> indices, StatsParams parameters);
		StatsResponse Stats(string index);
		IndicesOperationResponse Swap(string alias, System.Collections.Generic.IEnumerable<string> oldIndices, System.Collections.Generic.IEnumerable<string> newIndices);
		bool TryConnect(out ConnectionStatus status);
		UnregisterPercolateResponse UnregisterPercolator(string index, string name);
		UnregisterPercolateResponse UnregisterPercolator<T>(string name) where T : class;
		UpdateResponse Update(Action<UpdateDescriptor<dynamic>> updateSelector);
		UpdateResponse Update<T>(Action<UpdateDescriptor<T>> updateSelector) where T : class;
		SettingsOperationResponse UpdateSettings(IndexSettings settings);
		SettingsOperationResponse UpdateSettings(string index, IndexSettings settings);
		ElasticSearchVersionInfo VersionInfo { get; }
	}
}
