using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using Nest;
using Nest.Specification.CatApi;
using Nest.Specification.ClusterApi;
using Nest.Specification.CrossClusterReplicationApi;
using Nest.Specification.GraphApi;
using Nest.Specification.IndexLifecycleManagementApi;
using Nest.Specification.IndicesApi;
using Nest.Specification.IngestApi;
using Nest.Specification.LicenseApi;
using Nest.Specification.MachineLearningApi;
using Nest.Specification.MigrationApi;
using Nest.Specification.NodesApi;
using Nest.Specification.RollupApi;
using Nest.Specification.SecurityApi;
using Nest.Specification.SnapshotApi;
using Nest.Specification.SqlApi;
using Nest.Specification.TasksApi;
using Nest.Specification.WatcherApi;
using Nest.Specification.XPackApi;

//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/master/rest-api-spec
namespace Nest
{
	///<summary>
	///Raw operations with elasticsearch
	///</summary>
	public partial interface IElasticClient
	{
		CatNamespace Cat
		{
			get;
		}

		ClusterNamespace Cluster
		{
			get;
		}

		CrossClusterReplicationNamespace CrossClusterReplication
		{
			get;
		}

		GraphNamespace Graph
		{
			get;
		}

		IndexLifecycleManagementNamespace IndexLifecycleManagement
		{
			get;
		}

		IndicesNamespace Indices
		{
			get;
		}

		IngestNamespace Ingest
		{
			get;
		}

		LicenseNamespace License
		{
			get;
		}

		MachineLearningNamespace MachineLearning
		{
			get;
		}

		MigrationNamespace Migration
		{
			get;
		}

		NodesNamespace Nodes
		{
			get;
		}

		///<inheritdoc cref = "IBulkRequest"/>
		BulkResponse Bulk(Func<BulkDescriptor, IBulkRequest> selector);
		///<inheritdoc cref = "IBulkRequest"/>
		Task<BulkResponse> BulkAsync(Func<BulkDescriptor, IBulkRequest> selector, CancellationToken ct = default);
		///<inheritdoc cref = "IBulkRequest"/>
		BulkResponse Bulk(IBulkRequest request);
		///<inheritdoc cref = "IBulkRequest"/>
		Task<BulkResponse> BulkAsync(IBulkRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IClearScrollRequest"/>
		ClearScrollResponse ClearScroll(Func<ClearScrollDescriptor, IClearScrollRequest> selector = null);
		///<inheritdoc cref = "IClearScrollRequest"/>
		Task<ClearScrollResponse> ClearScrollAsync(Func<ClearScrollDescriptor, IClearScrollRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IClearScrollRequest"/>
		ClearScrollResponse ClearScroll(IClearScrollRequest request);
		///<inheritdoc cref = "IClearScrollRequest"/>
		Task<ClearScrollResponse> ClearScrollAsync(IClearScrollRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "ICountRequest"/>
		CountResponse Count<TDocument>(Func<CountDescriptor<TDocument>, ICountRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "ICountRequest"/>
		Task<CountResponse> CountAsync<TDocument>(Func<CountDescriptor<TDocument>, ICountRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ICountRequest"/>
		CountResponse Count(ICountRequest request);
		///<inheritdoc cref = "ICountRequest"/>
		Task<CountResponse> CountAsync(ICountRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "ICreateRequest"/>
		CreateResponse Create<TDocument>(TDocument document, Func<CreateDescriptor<TDocument>, ICreateRequest<TDocument>> selector)
			where TDocument : class;
		///<inheritdoc cref = "ICreateRequest"/>
		Task<CreateResponse> CreateAsync<TDocument>(TDocument document, Func<CreateDescriptor<TDocument>, ICreateRequest<TDocument>> selector, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ICreateRequest"/>
		CreateResponse Create<TDocument>(ICreateRequest<TDocument> request)
			where TDocument : class;
		///<inheritdoc cref = "ICreateRequest"/>
		Task<CreateResponse> CreateAsync<TDocument>(ICreateRequest<TDocument> request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IDeleteRequest"/>
		DeleteResponse Delete<TDocument>(DocumentPath<TDocument> id, Func<DeleteDescriptor<TDocument>, IDeleteRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "IDeleteRequest"/>
		Task<DeleteResponse> DeleteAsync<TDocument>(DocumentPath<TDocument> id, Func<DeleteDescriptor<TDocument>, IDeleteRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IDeleteRequest"/>
		DeleteResponse Delete(IDeleteRequest request);
		///<inheritdoc cref = "IDeleteRequest"/>
		Task<DeleteResponse> DeleteAsync(IDeleteRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IDeleteByQueryRequest"/>
		DeleteByQueryResponse DeleteByQuery<TDocument>(Func<DeleteByQueryDescriptor<TDocument>, IDeleteByQueryRequest> selector)
			where TDocument : class;
		///<inheritdoc cref = "IDeleteByQueryRequest"/>
		Task<DeleteByQueryResponse> DeleteByQueryAsync<TDocument>(Func<DeleteByQueryDescriptor<TDocument>, IDeleteByQueryRequest> selector, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IDeleteByQueryRequest"/>
		DeleteByQueryResponse DeleteByQuery(IDeleteByQueryRequest request);
		///<inheritdoc cref = "IDeleteByQueryRequest"/>
		Task<DeleteByQueryResponse> DeleteByQueryAsync(IDeleteByQueryRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IDeleteByQueryRethrottleRequest"/>
		ListTasksResponse DeleteByQueryRethrottle(TaskId taskId, Func<DeleteByQueryRethrottleDescriptor, IDeleteByQueryRethrottleRequest> selector = null);
		///<inheritdoc cref = "IDeleteByQueryRethrottleRequest"/>
		Task<ListTasksResponse> DeleteByQueryRethrottleAsync(TaskId taskId, Func<DeleteByQueryRethrottleDescriptor, IDeleteByQueryRethrottleRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IDeleteByQueryRethrottleRequest"/>
		ListTasksResponse DeleteByQueryRethrottle(IDeleteByQueryRethrottleRequest request);
		///<inheritdoc cref = "IDeleteByQueryRethrottleRequest"/>
		Task<ListTasksResponse> DeleteByQueryRethrottleAsync(IDeleteByQueryRethrottleRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IDeleteScriptRequest"/>
		DeleteScriptResponse DeleteScript(Id id, Func<DeleteScriptDescriptor, IDeleteScriptRequest> selector = null);
		///<inheritdoc cref = "IDeleteScriptRequest"/>
		Task<DeleteScriptResponse> DeleteScriptAsync(Id id, Func<DeleteScriptDescriptor, IDeleteScriptRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IDeleteScriptRequest"/>
		DeleteScriptResponse DeleteScript(IDeleteScriptRequest request);
		///<inheritdoc cref = "IDeleteScriptRequest"/>
		Task<DeleteScriptResponse> DeleteScriptAsync(IDeleteScriptRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IDocumentExistsRequest"/>
		ExistsResponse DocumentExists<TDocument>(DocumentPath<TDocument> id, Func<DocumentExistsDescriptor<TDocument>, IDocumentExistsRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "IDocumentExistsRequest"/>
		Task<ExistsResponse> DocumentExistsAsync<TDocument>(DocumentPath<TDocument> id, Func<DocumentExistsDescriptor<TDocument>, IDocumentExistsRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IDocumentExistsRequest"/>
		ExistsResponse DocumentExists(IDocumentExistsRequest request);
		///<inheritdoc cref = "IDocumentExistsRequest"/>
		Task<ExistsResponse> DocumentExistsAsync(IDocumentExistsRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "ISourceExistsRequest"/>
		ExistsResponse SourceExists<TDocument>(DocumentPath<TDocument> id, Func<SourceExistsDescriptor<TDocument>, ISourceExistsRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "ISourceExistsRequest"/>
		Task<ExistsResponse> SourceExistsAsync<TDocument>(DocumentPath<TDocument> id, Func<SourceExistsDescriptor<TDocument>, ISourceExistsRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ISourceExistsRequest"/>
		ExistsResponse SourceExists(ISourceExistsRequest request);
		///<inheritdoc cref = "ISourceExistsRequest"/>
		Task<ExistsResponse> SourceExistsAsync(ISourceExistsRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IExplainRequest"/>
		ExplainResponse<TDocument> Explain<TDocument>(DocumentPath<TDocument> id, Func<ExplainDescriptor<TDocument>, IExplainRequest<TDocument>> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "IExplainRequest"/>
		Task<ExplainResponse<TDocument>> ExplainAsync<TDocument>(DocumentPath<TDocument> id, Func<ExplainDescriptor<TDocument>, IExplainRequest<TDocument>> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IExplainRequest"/>
		ExplainResponse<TDocument> Explain<TDocument>(IExplainRequest<TDocument> request)
			where TDocument : class;
		///<inheritdoc cref = "IExplainRequest"/>
		Task<ExplainResponse<TDocument>> ExplainAsync<TDocument>(IExplainRequest<TDocument> request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IFieldCapabilitiesRequest"/>
		FieldCapabilitiesResponse FieldCapabilities(Indices index = null, Func<FieldCapabilitiesDescriptor, IFieldCapabilitiesRequest> selector = null);
		///<inheritdoc cref = "IFieldCapabilitiesRequest"/>
		Task<FieldCapabilitiesResponse> FieldCapabilitiesAsync(Indices index = null, Func<FieldCapabilitiesDescriptor, IFieldCapabilitiesRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IFieldCapabilitiesRequest"/>
		FieldCapabilitiesResponse FieldCapabilities(IFieldCapabilitiesRequest request);
		///<inheritdoc cref = "IFieldCapabilitiesRequest"/>
		Task<FieldCapabilitiesResponse> FieldCapabilitiesAsync(IFieldCapabilitiesRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IGetRequest"/>
		GetResponse<TDocument> Get<TDocument>(DocumentPath<TDocument> id, Func<GetDescriptor<TDocument>, IGetRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "IGetRequest"/>
		Task<GetResponse<TDocument>> GetAsync<TDocument>(DocumentPath<TDocument> id, Func<GetDescriptor<TDocument>, IGetRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IGetRequest"/>
		GetResponse<TDocument> Get<TDocument>(IGetRequest request)
			where TDocument : class;
		///<inheritdoc cref = "IGetRequest"/>
		Task<GetResponse<TDocument>> GetAsync<TDocument>(IGetRequest request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IGetScriptRequest"/>
		GetScriptResponse GetScript(Id id, Func<GetScriptDescriptor, IGetScriptRequest> selector = null);
		///<inheritdoc cref = "IGetScriptRequest"/>
		Task<GetScriptResponse> GetScriptAsync(Id id, Func<GetScriptDescriptor, IGetScriptRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IGetScriptRequest"/>
		GetScriptResponse GetScript(IGetScriptRequest request);
		///<inheritdoc cref = "IGetScriptRequest"/>
		Task<GetScriptResponse> GetScriptAsync(IGetScriptRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "ISourceRequest"/>
		SourceResponse<TDocument> Source<TDocument>(DocumentPath<TDocument> id, Func<SourceDescriptor<TDocument>, ISourceRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "ISourceRequest"/>
		Task<SourceResponse<TDocument>> SourceAsync<TDocument>(DocumentPath<TDocument> id, Func<SourceDescriptor<TDocument>, ISourceRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ISourceRequest"/>
		SourceResponse<TDocument> Source<TDocument>(ISourceRequest request)
			where TDocument : class;
		///<inheritdoc cref = "ISourceRequest"/>
		Task<SourceResponse<TDocument>> SourceAsync<TDocument>(ISourceRequest request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IIndexRequest"/>
		IndexResponse Index<TDocument>(TDocument document, Func<IndexDescriptor<TDocument>, IIndexRequest<TDocument>> selector)
			where TDocument : class;
		///<inheritdoc cref = "IIndexRequest"/>
		Task<IndexResponse> IndexAsync<TDocument>(TDocument document, Func<IndexDescriptor<TDocument>, IIndexRequest<TDocument>> selector, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IIndexRequest"/>
		IndexResponse Index<TDocument>(IIndexRequest<TDocument> request)
			where TDocument : class;
		///<inheritdoc cref = "IIndexRequest"/>
		Task<IndexResponse> IndexAsync<TDocument>(IIndexRequest<TDocument> request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IRootNodeInfoRequest"/>
		RootNodeInfoResponse RootNodeInfo(Func<RootNodeInfoDescriptor, IRootNodeInfoRequest> selector = null);
		///<inheritdoc cref = "IRootNodeInfoRequest"/>
		Task<RootNodeInfoResponse> RootNodeInfoAsync(Func<RootNodeInfoDescriptor, IRootNodeInfoRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IRootNodeInfoRequest"/>
		RootNodeInfoResponse RootNodeInfo(IRootNodeInfoRequest request);
		///<inheritdoc cref = "IRootNodeInfoRequest"/>
		Task<RootNodeInfoResponse> RootNodeInfoAsync(IRootNodeInfoRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiGetRequest"/>
		MultiGetResponse MultiGet(Func<MultiGetDescriptor, IMultiGetRequest> selector = null);
		///<inheritdoc cref = "IMultiGetRequest"/>
		Task<MultiGetResponse> MultiGetAsync(Func<MultiGetDescriptor, IMultiGetRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiGetRequest"/>
		MultiGetResponse MultiGet(IMultiGetRequest request);
		///<inheritdoc cref = "IMultiGetRequest"/>
		Task<MultiGetResponse> MultiGetAsync(IMultiGetRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiSearchRequest"/>
		MultiSearchResponse MultiSearch(Indices index = null, Func<MultiSearchDescriptor, IMultiSearchRequest> selector = null);
		///<inheritdoc cref = "IMultiSearchRequest"/>
		Task<MultiSearchResponse> MultiSearchAsync(Indices index = null, Func<MultiSearchDescriptor, IMultiSearchRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiSearchRequest"/>
		MultiSearchResponse MultiSearch(IMultiSearchRequest request);
		///<inheritdoc cref = "IMultiSearchRequest"/>
		Task<MultiSearchResponse> MultiSearchAsync(IMultiSearchRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiSearchTemplateRequest"/>
		MultiSearchResponse MultiSearchTemplate(Indices index = null, Func<MultiSearchTemplateDescriptor, IMultiSearchTemplateRequest> selector = null);
		///<inheritdoc cref = "IMultiSearchTemplateRequest"/>
		Task<MultiSearchResponse> MultiSearchTemplateAsync(Indices index = null, Func<MultiSearchTemplateDescriptor, IMultiSearchTemplateRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiSearchTemplateRequest"/>
		MultiSearchResponse MultiSearchTemplate(IMultiSearchTemplateRequest request);
		///<inheritdoc cref = "IMultiSearchTemplateRequest"/>
		Task<MultiSearchResponse> MultiSearchTemplateAsync(IMultiSearchTemplateRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiTermVectorsRequest"/>
		MultiTermVectorsResponse MultiTermVectors(Func<MultiTermVectorsDescriptor, IMultiTermVectorsRequest> selector = null);
		///<inheritdoc cref = "IMultiTermVectorsRequest"/>
		Task<MultiTermVectorsResponse> MultiTermVectorsAsync(Func<MultiTermVectorsDescriptor, IMultiTermVectorsRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IMultiTermVectorsRequest"/>
		MultiTermVectorsResponse MultiTermVectors(IMultiTermVectorsRequest request);
		///<inheritdoc cref = "IMultiTermVectorsRequest"/>
		Task<MultiTermVectorsResponse> MultiTermVectorsAsync(IMultiTermVectorsRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IPingRequest"/>
		PingResponse Ping(Func<PingDescriptor, IPingRequest> selector = null);
		///<inheritdoc cref = "IPingRequest"/>
		Task<PingResponse> PingAsync(Func<PingDescriptor, IPingRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IPingRequest"/>
		PingResponse Ping(IPingRequest request);
		///<inheritdoc cref = "IPingRequest"/>
		Task<PingResponse> PingAsync(IPingRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IPutScriptRequest"/>
		PutScriptResponse PutScript(Id id, Func<PutScriptDescriptor, IPutScriptRequest> selector);
		///<inheritdoc cref = "IPutScriptRequest"/>
		Task<PutScriptResponse> PutScriptAsync(Id id, Func<PutScriptDescriptor, IPutScriptRequest> selector, CancellationToken ct = default);
		///<inheritdoc cref = "IPutScriptRequest"/>
		PutScriptResponse PutScript(IPutScriptRequest request);
		///<inheritdoc cref = "IPutScriptRequest"/>
		Task<PutScriptResponse> PutScriptAsync(IPutScriptRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IReindexOnServerRequest"/>
		ReindexOnServerResponse ReindexOnServer(Func<ReindexOnServerDescriptor, IReindexOnServerRequest> selector);
		///<inheritdoc cref = "IReindexOnServerRequest"/>
		Task<ReindexOnServerResponse> ReindexOnServerAsync(Func<ReindexOnServerDescriptor, IReindexOnServerRequest> selector, CancellationToken ct = default);
		///<inheritdoc cref = "IReindexOnServerRequest"/>
		ReindexOnServerResponse ReindexOnServer(IReindexOnServerRequest request);
		///<inheritdoc cref = "IReindexOnServerRequest"/>
		Task<ReindexOnServerResponse> ReindexOnServerAsync(IReindexOnServerRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IReindexRethrottleRequest"/>
		ReindexRethrottleResponse ReindexRethrottle(TaskId taskId, Func<ReindexRethrottleDescriptor, IReindexRethrottleRequest> selector = null);
		///<inheritdoc cref = "IReindexRethrottleRequest"/>
		Task<ReindexRethrottleResponse> ReindexRethrottleAsync(TaskId taskId, Func<ReindexRethrottleDescriptor, IReindexRethrottleRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IReindexRethrottleRequest"/>
		ReindexRethrottleResponse ReindexRethrottle(IReindexRethrottleRequest request);
		///<inheritdoc cref = "IReindexRethrottleRequest"/>
		Task<ReindexRethrottleResponse> ReindexRethrottleAsync(IReindexRethrottleRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IRenderSearchTemplateRequest"/>
		RenderSearchTemplateResponse RenderSearchTemplate(Func<RenderSearchTemplateDescriptor, IRenderSearchTemplateRequest> selector = null);
		///<inheritdoc cref = "IRenderSearchTemplateRequest"/>
		Task<RenderSearchTemplateResponse> RenderSearchTemplateAsync(Func<RenderSearchTemplateDescriptor, IRenderSearchTemplateRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IRenderSearchTemplateRequest"/>
		RenderSearchTemplateResponse RenderSearchTemplate(IRenderSearchTemplateRequest request);
		///<inheritdoc cref = "IRenderSearchTemplateRequest"/>
		Task<RenderSearchTemplateResponse> RenderSearchTemplateAsync(IRenderSearchTemplateRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IExecutePainlessScriptRequest"/>
		ExecutePainlessScriptResponse<TResult> ExecutePainlessScript<TResult>(Func<ExecutePainlessScriptDescriptor, IExecutePainlessScriptRequest> selector = null);
		///<inheritdoc cref = "IExecutePainlessScriptRequest"/>
		Task<ExecutePainlessScriptResponse<TResult>> ExecutePainlessScriptAsync<TResult>(Func<ExecutePainlessScriptDescriptor, IExecutePainlessScriptRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IExecutePainlessScriptRequest"/>
		ExecutePainlessScriptResponse<TResult> ExecutePainlessScript<TResult>(IExecutePainlessScriptRequest request);
		///<inheritdoc cref = "IExecutePainlessScriptRequest"/>
		Task<ExecutePainlessScriptResponse<TResult>> ExecutePainlessScriptAsync<TResult>(IExecutePainlessScriptRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IScrollRequest"/>
		SearchResponse<TDocument> Scroll<TInferDocument, TDocument>(Time scroll, string scrollId, Func<ScrollDescriptor<TInferDocument>, IScrollRequest> selector = null)
			where TInferDocument : class where TDocument : class;
		///<inheritdoc cref = "IScrollRequest"/>
		Task<SearchResponse<TDocument>> ScrollAsync<TInferDocument, TDocument>(Time scroll, string scrollId, Func<ScrollDescriptor<TInferDocument>, IScrollRequest> selector = null, CancellationToken ct = default)
			where TInferDocument : class where TDocument : class;
		///<inheritdoc cref = "IScrollRequest"/>
		SearchResponse<TDocument> Scroll<TDocument>(Time scroll, string scrollId, Func<ScrollDescriptor<TDocument>, IScrollRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "IScrollRequest"/>
		Task<SearchResponse<TDocument>> ScrollAsync<TDocument>(Time scroll, string scrollId, Func<ScrollDescriptor<TDocument>, IScrollRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IScrollRequest"/>
		SearchResponse<TDocument> Scroll<TDocument>(IScrollRequest request)
			where TDocument : class;
		///<inheritdoc cref = "IScrollRequest"/>
		Task<SearchResponse<TDocument>> ScrollAsync<TDocument>(IScrollRequest request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ISearchRequest"/>
		SearchResponse<TDocument> Search<TInferDocument, TDocument>(Func<SearchDescriptor<TInferDocument>, ISearchRequest> selector = null)
			where TInferDocument : class where TDocument : class;
		///<inheritdoc cref = "ISearchRequest"/>
		Task<SearchResponse<TDocument>> SearchAsync<TInferDocument, TDocument>(Func<SearchDescriptor<TInferDocument>, ISearchRequest> selector = null, CancellationToken ct = default)
			where TInferDocument : class where TDocument : class;
		///<inheritdoc cref = "ISearchRequest"/>
		SearchResponse<TDocument> Search<TDocument>(Func<SearchDescriptor<TDocument>, ISearchRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "ISearchRequest"/>
		Task<SearchResponse<TDocument>> SearchAsync<TDocument>(Func<SearchDescriptor<TDocument>, ISearchRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ISearchRequest"/>
		SearchResponse<TDocument> Search<TDocument>(ISearchRequest request)
			where TDocument : class;
		///<inheritdoc cref = "ISearchRequest"/>
		Task<SearchResponse<TDocument>> SearchAsync<TDocument>(ISearchRequest request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ISearchShardsRequest"/>
		SearchShardsResponse SearchShards<TDocument>(Func<SearchShardsDescriptor<TDocument>, ISearchShardsRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "ISearchShardsRequest"/>
		Task<SearchShardsResponse> SearchShardsAsync<TDocument>(Func<SearchShardsDescriptor<TDocument>, ISearchShardsRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ISearchShardsRequest"/>
		SearchShardsResponse SearchShards(ISearchShardsRequest request);
		///<inheritdoc cref = "ISearchShardsRequest"/>
		Task<SearchShardsResponse> SearchShardsAsync(ISearchShardsRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "ISearchTemplateRequest"/>
		SearchResponse<TDocument> SearchTemplate<TDocument>(Func<SearchTemplateDescriptor<TDocument>, ISearchTemplateRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "ISearchTemplateRequest"/>
		Task<SearchResponse<TDocument>> SearchTemplateAsync<TDocument>(Func<SearchTemplateDescriptor<TDocument>, ISearchTemplateRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ISearchTemplateRequest"/>
		SearchResponse<TDocument> SearchTemplate<TDocument>(ISearchTemplateRequest request)
			where TDocument : class;
		///<inheritdoc cref = "ISearchTemplateRequest"/>
		Task<SearchResponse<TDocument>> SearchTemplateAsync<TDocument>(ISearchTemplateRequest request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ITermVectorsRequest"/>
		TermVectorsResponse TermVectors<TDocument>(Func<TermVectorsDescriptor<TDocument>, ITermVectorsRequest<TDocument>> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "ITermVectorsRequest"/>
		Task<TermVectorsResponse> TermVectorsAsync<TDocument>(Func<TermVectorsDescriptor<TDocument>, ITermVectorsRequest<TDocument>> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "ITermVectorsRequest"/>
		TermVectorsResponse TermVectors<TDocument>(ITermVectorsRequest<TDocument> request)
			where TDocument : class;
		///<inheritdoc cref = "ITermVectorsRequest"/>
		Task<TermVectorsResponse> TermVectorsAsync<TDocument>(ITermVectorsRequest<TDocument> request, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IUpdateRequest"/>
		UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(DocumentPath<TDocument> id, Func<UpdateDescriptor<TDocument, TPartialDocument>, IUpdateRequest<TDocument, TPartialDocument>> selector)
			where TDocument : class where TPartialDocument : class;
		///<inheritdoc cref = "IUpdateRequest"/>
		Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(DocumentPath<TDocument> id, Func<UpdateDescriptor<TDocument, TPartialDocument>, IUpdateRequest<TDocument, TPartialDocument>> selector, CancellationToken ct = default)
			where TDocument : class where TPartialDocument : class;
		///<inheritdoc cref = "IUpdateRequest"/>
		UpdateResponse<TDocument> Update<TDocument>(DocumentPath<TDocument> id, Func<UpdateDescriptor<TDocument, TDocument>, IUpdateRequest<TDocument, TDocument>> selector)
			where TDocument : class;
		///<inheritdoc cref = "IUpdateRequest"/>
		Task<UpdateResponse<TDocument>> UpdateAsync<TDocument>(DocumentPath<TDocument> id, Func<UpdateDescriptor<TDocument, TDocument>, IUpdateRequest<TDocument, TDocument>> selector, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IUpdateRequest"/>
		UpdateResponse<TDocument> Update<TDocument, TPartialDocument>(IUpdateRequest<TDocument, TPartialDocument> request)
			where TDocument : class where TPartialDocument : class;
		///<inheritdoc cref = "IUpdateRequest"/>
		Task<UpdateResponse<TDocument>> UpdateAsync<TDocument, TPartialDocument>(IUpdateRequest<TDocument, TPartialDocument> request, CancellationToken ct = default)
			where TDocument : class where TPartialDocument : class;
		///<inheritdoc cref = "IUpdateByQueryRequest"/>
		UpdateByQueryResponse UpdateByQuery<TDocument>(Func<UpdateByQueryDescriptor<TDocument>, IUpdateByQueryRequest> selector = null)
			where TDocument : class;
		///<inheritdoc cref = "IUpdateByQueryRequest"/>
		Task<UpdateByQueryResponse> UpdateByQueryAsync<TDocument>(Func<UpdateByQueryDescriptor<TDocument>, IUpdateByQueryRequest> selector = null, CancellationToken ct = default)
			where TDocument : class;
		///<inheritdoc cref = "IUpdateByQueryRequest"/>
		UpdateByQueryResponse UpdateByQuery(IUpdateByQueryRequest request);
		///<inheritdoc cref = "IUpdateByQueryRequest"/>
		Task<UpdateByQueryResponse> UpdateByQueryAsync(IUpdateByQueryRequest request, CancellationToken ct = default);
		///<inheritdoc cref = "IUpdateByQueryRethrottleRequest"/>
		ListTasksResponse UpdateByQueryRethrottle(TaskId taskId, Func<UpdateByQueryRethrottleDescriptor, IUpdateByQueryRethrottleRequest> selector = null);
		///<inheritdoc cref = "IUpdateByQueryRethrottleRequest"/>
		Task<ListTasksResponse> UpdateByQueryRethrottleAsync(TaskId taskId, Func<UpdateByQueryRethrottleDescriptor, IUpdateByQueryRethrottleRequest> selector = null, CancellationToken ct = default);
		///<inheritdoc cref = "IUpdateByQueryRethrottleRequest"/>
		ListTasksResponse UpdateByQueryRethrottle(IUpdateByQueryRethrottleRequest request);
		///<inheritdoc cref = "IUpdateByQueryRethrottleRequest"/>
		Task<ListTasksResponse> UpdateByQueryRethrottleAsync(IUpdateByQueryRethrottleRequest request, CancellationToken ct = default);
		RollupNamespace Rollup
		{
			get;
		}

		SecurityNamespace Security
		{
			get;
		}

		SnapshotNamespace Snapshot
		{
			get;
		}

		SqlNamespace Sql
		{
			get;
		}

		TasksNamespace Tasks
		{
			get;
		}

		WatcherNamespace Watcher
		{
			get;
		}

		XPackNamespace XPack
		{
			get;
		}
	}
}