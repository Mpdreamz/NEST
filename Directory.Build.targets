<Project>
  <PropertyGroup Condition="$(IsPackable) == True OR $(MSBuildProjectName.StartsWith('Tests'))">
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(SolutionRoot)\build\keys\keypair.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <PropertyGroup Condition="$(IsPackable) == True">

    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>1591,1572,1571,1573,1587,1570</NoWarn>
    <Prefer32Bit>false</Prefer32Bit>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>portable</DebugType>

    <DoSourceLink></DoSourceLink>
    <SourceLink Condition="'$(DoSourceLink)'!=''">$(BaseIntermediateOutputPath)\sl-$(MsBuildProjectName)-$(TargetFramework).json</SourceLink>
    <!-- we need to referenced assemblies during the command line build so that ILRepack can pick them up -->
    <CopyLocalLockFileAssemblies Condition="'$(TargetFramework)'=='netstandard2.0'">true</CopyLocalLockFileAssemblies>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  
  <Target Name="AssemblyInfos" 
          BeforeTargets="CoreGenerateAssemblyInfo" 
          Inputs="@InternalsVisibleTo" Outputs="%(InternalsVisibleTo.Identity)"
          Condition="$(IsPackable) == True"
  >
    <PropertyGroup>
      <ExposedAssembly>%(InternalsVisibleTo.Identity)</ExposedAssembly>
      <VersionNamespaced>$(ExposedAssembly.Replace("Nest","Nest$(MajorVersion)").Replace("Elasticsearch.Net","Elasticsearch.Net$(MajorVersion
        )"))</VersionNamespaced>
    </PropertyGroup>
    <ItemGroup>
      <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
        <_Parameter1>%(InternalsVisibleTo.Identity), PublicKey=$(ExposedPublicKey)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
        <_Parameter1>$(VersionNamespaced), PublicKey=$(ExposedPublicKey)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <Target Name="GenerateSourceLink" BeforeTargets="CoreCompile" Condition="'$(DoSourceLink)'!=''">
    <Delete Files="$(SourceLink)" Condition="Exists('$(SourceLink)')"/>
    <Exec Command="git rev-parse HEAD" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="LatestCommit"/>
    </Exec>
    <Exec Command="git rev-parse --show-toplevel" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitRootFolder"/>
    </Exec>
    <WriteLinesToFile File="$(SourceLink)" Lines="{&quot;documents&quot;: { &quot;$([System.IO.Path]::GetFullPath('$(GitRootFolder)/').Replace('\','\\'))*&quot; : &quot;$(RepoUri)/$(LatestCommit)/*&quot; }}"/>
  </Target>
</Project>